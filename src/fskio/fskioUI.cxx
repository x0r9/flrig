// generated by Fast Light User Interface Designer (fluid) version 1.0305

#include "gettext.h"
#include "fskioUI.h"
#include "fsk.h"

Fl_Input2 *FSK_txt_to_send=(Fl_Input2 *)0;

static void cb_FSK_txt_to_send(Fl_Input2*, void*) {
  FSK_control_function_keys();
}

Fl_Button *btn_fskio_config=(Fl_Button *)0;

static void cb_btn_fskio_config(Fl_Button*, void*) {
  FSK_open_config();
}

Fl_Button *btn_fskio_clear=(Fl_Button *)0;

static void cb_btn_fskio_clear(Fl_Button*, void*) {
  FSK_clear_text();
}

Fl_Light_Button *btn_fskioSEND=(Fl_Light_Button *)0;

static void cb_btn_fskioSEND(Fl_Light_Button* o, void*) {
  FSK_send_text(o->value());
}

static void cb_FSK_btn_msg(Fl_Button*, void*) {
  FSK_exec_msg(0);
}

static void cb_FSK_btn_msg1(Fl_Button*, void*) {
  FSK_exec_msg(1);
}

static void cb_FSK_btn_msg2(Fl_Button*, void*) {
  FSK_exec_msg(2);
}

static void cb_FSK_btn_msg3(Fl_Button*, void*) {
  FSK_exec_msg(3);
}

static void cb_FSK_btn_msg4(Fl_Button*, void*) {
  FSK_exec_msg(4);
}

static void cb_FSK_btn_msg5(Fl_Button*, void*) {
  FSK_exec_msg(5);
}

static void cb_FSK_btn_msg6(Fl_Button*, void*) {
  FSK_exec_msg(6);
}

static void cb_FSK_btn_msg7(Fl_Button*, void*) {
  FSK_exec_msg(7);
}

static void cb_FSK_btn_msg8(Fl_Button*, void*) {
  FSK_exec_msg(8);
}

static void cb_FSK_btn_msg9(Fl_Button*, void*) {
  FSK_exec_msg(9);
}

static void cb_FSK_btn_msga(Fl_Button*, void*) {
  FSK_exec_msg(10);
}

Fl_Button *FSK_btn_msg[12]={(Fl_Button *)0};

static void cb_FSK_btn_msgb(Fl_Button*, void*) {
  FSK_exec_msg(11);
}

Fl_Double_Window* fskio_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(670, 130, _("FSK keying"));
    w = o; if (w) {/* empty */}
    { FSK_txt_to_send = new Fl_Input2(2, 2, 666, 68);
      FSK_txt_to_send->type(4);
      FSK_txt_to_send->box(FL_DOWN_BOX);
      FSK_txt_to_send->color(FL_BACKGROUND2_COLOR);
      FSK_txt_to_send->selection_color(FL_SELECTION_COLOR);
      FSK_txt_to_send->labeltype(FL_NORMAL_LABEL);
      FSK_txt_to_send->labelfont(0);
      FSK_txt_to_send->labelsize(14);
      FSK_txt_to_send->labelcolor(FL_FOREGROUND_COLOR);
      FSK_txt_to_send->callback((Fl_Callback*)cb_FSK_txt_to_send);
      FSK_txt_to_send->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      FSK_txt_to_send->when(FL_WHEN_CHANGED);
      Fl_Group::current()->resizable(FSK_txt_to_send);
    } // Fl_Input2* FSK_txt_to_send
    { Fl_Group* o = new Fl_Group(0, 70, 670, 60);
      { btn_fskio_config = new Fl_Button(390, 73, 60, 22, _("Config"));
        btn_fskio_config->tooltip(_("Open FSK configuration dialog"));
        btn_fskio_config->callback((Fl_Callback*)cb_btn_fskio_config);
      } // Fl_Button* btn_fskio_config
      { btn_fskio_clear = new Fl_Button(473, 73, 60, 22, _("Clear"));
        btn_fskio_clear->tooltip(_("Clear transmit text"));
        btn_fskio_clear->callback((Fl_Callback*)cb_btn_fskio_clear);
      } // Fl_Button* btn_fskio_clear
      { btn_fskioSEND = new Fl_Light_Button(557, 73, 105, 22, _("Xmt / Rcv"));
        btn_fskioSEND->tooltip(_("Send / Pause sending characters"));
        btn_fskioSEND->callback((Fl_Callback*)cb_btn_fskioSEND);
      } // Fl_Light_Button* btn_fskioSEND
      { Fl_Group* o = new Fl_Group(2, 98, 220, 30);
        o->box(FL_ENGRAVED_BOX);
        { FSK_btn_msg[0] = new Fl_Button(5, 102, 50, 22, _("F 1"));
          FSK_btn_msg[0]->tooltip(_("Action - Function Key Left click\nEdit - Control left click"));
          FSK_btn_msg[0]->callback((Fl_Callback*)cb_FSK_btn_msg);
        } // Fl_Button* FSK_btn_msg[0]
        { FSK_btn_msg[1] = new Fl_Button(59, 102, 50, 22, _("F 2"));
          FSK_btn_msg[1]->tooltip(_("Action - Function Key Left click\nEdit - Control left click"));
          FSK_btn_msg[1]->callback((Fl_Callback*)cb_FSK_btn_msg1);
        } // Fl_Button* FSK_btn_msg[1]
        { FSK_btn_msg[2] = new Fl_Button(113, 102, 50, 22, _("F 3"));
          FSK_btn_msg[2]->tooltip(_("Action - Function Key Left click\nEdit - Control left click"));
          FSK_btn_msg[2]->callback((Fl_Callback*)cb_FSK_btn_msg2);
        } // Fl_Button* FSK_btn_msg[2]
        { FSK_btn_msg[3] = new Fl_Button(168, 102, 50, 22, _("F 4"));
          FSK_btn_msg[3]->tooltip(_("Action - Function Key Left click\nEdit - Control left click"));
          FSK_btn_msg[3]->callback((Fl_Callback*)cb_FSK_btn_msg3);
        } // Fl_Button* FSK_btn_msg[3]
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(225, 98, 220, 30);
        o->box(FL_ENGRAVED_BOX);
        { FSK_btn_msg[4] = new Fl_Button(229, 102, 50, 22, _("F 5"));
          FSK_btn_msg[4]->tooltip(_("Action - Function Key Left click\nEdit - Control left click"));
          FSK_btn_msg[4]->callback((Fl_Callback*)cb_FSK_btn_msg4);
        } // Fl_Button* FSK_btn_msg[4]
        { FSK_btn_msg[5] = new Fl_Button(283, 102, 50, 22, _("F 6"));
          FSK_btn_msg[5]->tooltip(_("Action - Function Key Left click\nEdit - Control left click"));
          FSK_btn_msg[5]->callback((Fl_Callback*)cb_FSK_btn_msg5);
        } // Fl_Button* FSK_btn_msg[5]
        { FSK_btn_msg[6] = new Fl_Button(337, 102, 50, 22, _("F 7"));
          FSK_btn_msg[6]->tooltip(_("Action - Function Key Left click\nEdit - Control left click"));
          FSK_btn_msg[6]->callback((Fl_Callback*)cb_FSK_btn_msg6);
        } // Fl_Button* FSK_btn_msg[6]
        { FSK_btn_msg[7] = new Fl_Button(391, 102, 50, 22, _("F 8"));
          FSK_btn_msg[7]->tooltip(_("Action - Function Key Left click\nEdit - Control left click"));
          FSK_btn_msg[7]->callback((Fl_Callback*)cb_FSK_btn_msg7);
        } // Fl_Button* FSK_btn_msg[7]
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(448, 98, 220, 30);
        o->box(FL_ENGRAVED_BOX);
        { FSK_btn_msg[8] = new Fl_Button(451, 102, 50, 22, _("F 9"));
          FSK_btn_msg[8]->tooltip(_("Action - Function Key Left click\nEdit - Control left click"));
          FSK_btn_msg[8]->callback((Fl_Callback*)cb_FSK_btn_msg8);
        } // Fl_Button* FSK_btn_msg[8]
        { FSK_btn_msg[9] = new Fl_Button(505, 102, 50, 22, _("F 10"));
          FSK_btn_msg[9]->tooltip(_("Action - Function Key Left click\nEdit - Control left click"));
          FSK_btn_msg[9]->callback((Fl_Callback*)cb_FSK_btn_msg9);
        } // Fl_Button* FSK_btn_msg[9]
        { FSK_btn_msg[10] = new Fl_Button(559, 102, 50, 22, _("F 11"));
          FSK_btn_msg[10]->tooltip(_("Action - Function Key Left click\nEdit - Control left click"));
          FSK_btn_msg[10]->callback((Fl_Callback*)cb_FSK_btn_msga);
        } // Fl_Button* FSK_btn_msg[10]
        { FSK_btn_msg[11] = new Fl_Button(614, 102, 50, 22, _("F 12"));
          FSK_btn_msg[11]->tooltip(_("Action - Function Key Left click\nEdit - Control left click"));
          FSK_btn_msg[11]->callback((Fl_Callback*)cb_FSK_btn_msgb);
        } // Fl_Button* FSK_btn_msg[11]
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    o->end();
  } // Fl_Double_Window* o
  return w;
}

static void cb_FSK_edit_label(Fl_Input2*, void*) {
  FSK_label_cb(1);
}

static void cb_FSK_edit_msg(Fl_Input2*, void*) {
  FSK_msg_cb(1);
}

static void cb_FSK_edit_label1(Fl_Input2*, void*) {
  FSK_label_cb(2);
}

static void cb_FSK_edit_msg1(Fl_Input2*, void*) {
  FSK_msg_cb(2);
}

static void cb_FSK_edit_label2(Fl_Input2*, void*) {
  FSK_label_cb(3);
}

static void cb_FSK_edit_msg2(Fl_Input2*, void*) {
  FSK_msg_cb(3);
}

static void cb_FSK_edit_label3(Fl_Input2*, void*) {
  FSK_label_cb(4);
}

static void cb_FSK_edit_msg3(Fl_Input2*, void*) {
  FSK_msg_cb(4);
}

static void cb_FSK_edit_label4(Fl_Input2*, void*) {
  FSK_label_cb(5);
}

static void cb_FSK_edit_msg4(Fl_Input2*, void*) {
  FSK_msg_cb(5);
}

static void cb_FSK_edit_label5(Fl_Input2*, void*) {
  FSK_label_cb(6);
}

static void cb_FSK_edit_msg5(Fl_Input2*, void*) {
  FSK_msg_cb(6);
}

static void cb_FSK_edit_label6(Fl_Input2*, void*) {
  FSK_label_cb(7);
}

static void cb_FSK_edit_msg6(Fl_Input2*, void*) {
  FSK_msg_cb(7);
}

static void cb_FSK_edit_label7(Fl_Input2*, void*) {
  FSK_label_cb(8);
}

static void cb_FSK_edit_msg7(Fl_Input2*, void*) {
  FSK_msg_cb(8);
}

static void cb_FSK_edit_label8(Fl_Input2*, void*) {
  FSK_label_cb(9);
}

static void cb_FSK_edit_msg8(Fl_Input2*, void*) {
  FSK_msg_cb(9);
}

static void cb_FSK_edit_label9(Fl_Input2*, void*) {
  FSK_label_cb(10);
}

static void cb_FSK_edit_msg9(Fl_Input2*, void*) {
  FSK_msg_cb(10);
}

static void cb_FSK_edit_labela(Fl_Input2*, void*) {
  FSK_label_cb(11);
}

static void cb_FSK_edit_msga(Fl_Input2*, void*) {
  FSK_msg_cb(11);
}

Fl_Input2 *FSK_edit_label[12]={(Fl_Input2 *)0};

static void cb_FSK_edit_labelb(Fl_Input2*, void*) {
  FSK_label_cb(12);
}

Fl_Input2 *FSK_edit_msg[12]={(Fl_Input2 *)0};

static void cb_FSK_edit_msgb(Fl_Input2*, void*) {
  FSK_msg_cb(12);
}

Fl_Button *FSK_btn_cancel_edit=(Fl_Button *)0;

static void cb_FSK_btn_cancel_edit(Fl_Button*, void*) {
  FSK_cancel_edit();
}

Fl_Button *FSK_btn_apply_edit=(Fl_Button *)0;

static void cb_FSK_btn_apply_edit(Fl_Button*, void*) {
  FSK_apply_edit();
}

Fl_Button *FSK_btn_FSK_done_edit=(Fl_Button *)0;

static void cb_FSK_btn_FSK_done_edit(Fl_Button*, void*) {
  FSK_done_edit();
}

Fl_Double_Window* FSK_make_message_editor() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(670, 344, _("FSK Message Editor"));
    w = o; if (w) {/* empty */}
    { Fl_Tabs* o = new Fl_Tabs(0, 0, 570, 345);
      o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
      { Fl_Group* o = new Fl_Group(0, 25, 570, 320, _("F1-F4"));
        o->hide();
        { new Fl_Box(22, 30, 84, 20, _("Label"));
        } // Fl_Box* o
        { new Fl_Box(211, 30, 223, 20, _("Message Text"));
        } // Fl_Box* o
        { FSK_edit_label[0] = new Fl_Input2(5, 74, 80, 22, _("F1"));
          FSK_edit_label[0]->box(FL_DOWN_BOX);
          FSK_edit_label[0]->color(FL_BACKGROUND2_COLOR);
          FSK_edit_label[0]->selection_color(FL_SELECTION_COLOR);
          FSK_edit_label[0]->labeltype(FL_NORMAL_LABEL);
          FSK_edit_label[0]->labelfont(0);
          FSK_edit_label[0]->labelsize(14);
          FSK_edit_label[0]->labelcolor(FL_FOREGROUND_COLOR);
          FSK_edit_label[0]->callback((Fl_Callback*)cb_FSK_edit_label);
          FSK_edit_label[0]->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          FSK_edit_label[0]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* FSK_edit_label[0]
        { FSK_edit_msg[0] = new Fl_Input2(90, 55, 475, 65);
          FSK_edit_msg[0]->type(4);
          FSK_edit_msg[0]->box(FL_DOWN_BOX);
          FSK_edit_msg[0]->color(FL_BACKGROUND2_COLOR);
          FSK_edit_msg[0]->selection_color(FL_SELECTION_COLOR);
          FSK_edit_msg[0]->labeltype(FL_NORMAL_LABEL);
          FSK_edit_msg[0]->labelfont(0);
          FSK_edit_msg[0]->labelsize(14);
          FSK_edit_msg[0]->labelcolor(FL_FOREGROUND_COLOR);
          FSK_edit_msg[0]->callback((Fl_Callback*)cb_FSK_edit_msg);
          FSK_edit_msg[0]->align(Fl_Align(FL_ALIGN_LEFT));
          FSK_edit_msg[0]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* FSK_edit_msg[0]
        { FSK_edit_label[1] = new Fl_Input2(5, 144, 80, 22, _("F2"));
          FSK_edit_label[1]->box(FL_DOWN_BOX);
          FSK_edit_label[1]->color(FL_BACKGROUND2_COLOR);
          FSK_edit_label[1]->selection_color(FL_SELECTION_COLOR);
          FSK_edit_label[1]->labeltype(FL_NORMAL_LABEL);
          FSK_edit_label[1]->labelfont(0);
          FSK_edit_label[1]->labelsize(14);
          FSK_edit_label[1]->labelcolor(FL_FOREGROUND_COLOR);
          FSK_edit_label[1]->callback((Fl_Callback*)cb_FSK_edit_label1);
          FSK_edit_label[1]->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          FSK_edit_label[1]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* FSK_edit_label[1]
        { FSK_edit_msg[1] = new Fl_Input2(90, 125, 475, 65);
          FSK_edit_msg[1]->type(4);
          FSK_edit_msg[1]->box(FL_DOWN_BOX);
          FSK_edit_msg[1]->color(FL_BACKGROUND2_COLOR);
          FSK_edit_msg[1]->selection_color(FL_SELECTION_COLOR);
          FSK_edit_msg[1]->labeltype(FL_NORMAL_LABEL);
          FSK_edit_msg[1]->labelfont(0);
          FSK_edit_msg[1]->labelsize(14);
          FSK_edit_msg[1]->labelcolor(FL_FOREGROUND_COLOR);
          FSK_edit_msg[1]->callback((Fl_Callback*)cb_FSK_edit_msg1);
          FSK_edit_msg[1]->align(Fl_Align(FL_ALIGN_LEFT));
          FSK_edit_msg[1]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* FSK_edit_msg[1]
        { FSK_edit_label[2] = new Fl_Input2(5, 214, 80, 22, _("F3"));
          FSK_edit_label[2]->box(FL_DOWN_BOX);
          FSK_edit_label[2]->color(FL_BACKGROUND2_COLOR);
          FSK_edit_label[2]->selection_color(FL_SELECTION_COLOR);
          FSK_edit_label[2]->labeltype(FL_NORMAL_LABEL);
          FSK_edit_label[2]->labelfont(0);
          FSK_edit_label[2]->labelsize(14);
          FSK_edit_label[2]->labelcolor(FL_FOREGROUND_COLOR);
          FSK_edit_label[2]->callback((Fl_Callback*)cb_FSK_edit_label2);
          FSK_edit_label[2]->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          FSK_edit_label[2]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* FSK_edit_label[2]
        { FSK_edit_msg[2] = new Fl_Input2(90, 195, 475, 65);
          FSK_edit_msg[2]->type(4);
          FSK_edit_msg[2]->box(FL_DOWN_BOX);
          FSK_edit_msg[2]->color(FL_BACKGROUND2_COLOR);
          FSK_edit_msg[2]->selection_color(FL_SELECTION_COLOR);
          FSK_edit_msg[2]->labeltype(FL_NORMAL_LABEL);
          FSK_edit_msg[2]->labelfont(0);
          FSK_edit_msg[2]->labelsize(14);
          FSK_edit_msg[2]->labelcolor(FL_FOREGROUND_COLOR);
          FSK_edit_msg[2]->callback((Fl_Callback*)cb_FSK_edit_msg2);
          FSK_edit_msg[2]->align(Fl_Align(FL_ALIGN_LEFT));
          FSK_edit_msg[2]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* FSK_edit_msg[2]
        { FSK_edit_label[3] = new Fl_Input2(5, 284, 80, 22, _("F4"));
          FSK_edit_label[3]->box(FL_DOWN_BOX);
          FSK_edit_label[3]->color(FL_BACKGROUND2_COLOR);
          FSK_edit_label[3]->selection_color(FL_SELECTION_COLOR);
          FSK_edit_label[3]->labeltype(FL_NORMAL_LABEL);
          FSK_edit_label[3]->labelfont(0);
          FSK_edit_label[3]->labelsize(14);
          FSK_edit_label[3]->labelcolor(FL_FOREGROUND_COLOR);
          FSK_edit_label[3]->callback((Fl_Callback*)cb_FSK_edit_label3);
          FSK_edit_label[3]->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          FSK_edit_label[3]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* FSK_edit_label[3]
        { FSK_edit_msg[3] = new Fl_Input2(90, 265, 475, 65);
          FSK_edit_msg[3]->type(4);
          FSK_edit_msg[3]->box(FL_DOWN_BOX);
          FSK_edit_msg[3]->color(FL_BACKGROUND2_COLOR);
          FSK_edit_msg[3]->selection_color(FL_SELECTION_COLOR);
          FSK_edit_msg[3]->labeltype(FL_NORMAL_LABEL);
          FSK_edit_msg[3]->labelfont(0);
          FSK_edit_msg[3]->labelsize(14);
          FSK_edit_msg[3]->labelcolor(FL_FOREGROUND_COLOR);
          FSK_edit_msg[3]->callback((Fl_Callback*)cb_FSK_edit_msg3);
          FSK_edit_msg[3]->align(Fl_Align(FL_ALIGN_LEFT));
          FSK_edit_msg[3]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* FSK_edit_msg[3]
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 25, 570, 320, _("F5-f8"));
        o->hide();
        { new Fl_Box(24, 30, 90, 20, _("Label"));
        } // Fl_Box* o
        { new Fl_Box(227, 30, 240, 20, _("Message Text"));
        } // Fl_Box* o
        { FSK_edit_label[4] = new Fl_Input2(5, 74, 80, 22, _("F5"));
          FSK_edit_label[4]->box(FL_DOWN_BOX);
          FSK_edit_label[4]->color(FL_BACKGROUND2_COLOR);
          FSK_edit_label[4]->selection_color(FL_SELECTION_COLOR);
          FSK_edit_label[4]->labeltype(FL_NORMAL_LABEL);
          FSK_edit_label[4]->labelfont(0);
          FSK_edit_label[4]->labelsize(14);
          FSK_edit_label[4]->labelcolor(FL_FOREGROUND_COLOR);
          FSK_edit_label[4]->callback((Fl_Callback*)cb_FSK_edit_label4);
          FSK_edit_label[4]->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          FSK_edit_label[4]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* FSK_edit_label[4]
        { FSK_edit_msg[4] = new Fl_Input2(90, 55, 475, 65);
          FSK_edit_msg[4]->type(4);
          FSK_edit_msg[4]->box(FL_DOWN_BOX);
          FSK_edit_msg[4]->color(FL_BACKGROUND2_COLOR);
          FSK_edit_msg[4]->selection_color(FL_SELECTION_COLOR);
          FSK_edit_msg[4]->labeltype(FL_NORMAL_LABEL);
          FSK_edit_msg[4]->labelfont(0);
          FSK_edit_msg[4]->labelsize(14);
          FSK_edit_msg[4]->labelcolor(FL_FOREGROUND_COLOR);
          FSK_edit_msg[4]->callback((Fl_Callback*)cb_FSK_edit_msg4);
          FSK_edit_msg[4]->align(Fl_Align(FL_ALIGN_LEFT));
          FSK_edit_msg[4]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* FSK_edit_msg[4]
        { FSK_edit_label[5] = new Fl_Input2(5, 144, 80, 22, _("F6"));
          FSK_edit_label[5]->box(FL_DOWN_BOX);
          FSK_edit_label[5]->color(FL_BACKGROUND2_COLOR);
          FSK_edit_label[5]->selection_color(FL_SELECTION_COLOR);
          FSK_edit_label[5]->labeltype(FL_NORMAL_LABEL);
          FSK_edit_label[5]->labelfont(0);
          FSK_edit_label[5]->labelsize(14);
          FSK_edit_label[5]->labelcolor(FL_FOREGROUND_COLOR);
          FSK_edit_label[5]->callback((Fl_Callback*)cb_FSK_edit_label5);
          FSK_edit_label[5]->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          FSK_edit_label[5]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* FSK_edit_label[5]
        { FSK_edit_msg[5] = new Fl_Input2(90, 125, 475, 65);
          FSK_edit_msg[5]->type(4);
          FSK_edit_msg[5]->box(FL_DOWN_BOX);
          FSK_edit_msg[5]->color(FL_BACKGROUND2_COLOR);
          FSK_edit_msg[5]->selection_color(FL_SELECTION_COLOR);
          FSK_edit_msg[5]->labeltype(FL_NORMAL_LABEL);
          FSK_edit_msg[5]->labelfont(0);
          FSK_edit_msg[5]->labelsize(14);
          FSK_edit_msg[5]->labelcolor(FL_FOREGROUND_COLOR);
          FSK_edit_msg[5]->callback((Fl_Callback*)cb_FSK_edit_msg5);
          FSK_edit_msg[5]->align(Fl_Align(FL_ALIGN_LEFT));
          FSK_edit_msg[5]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* FSK_edit_msg[5]
        { FSK_edit_label[6] = new Fl_Input2(5, 214, 80, 22, _("F7"));
          FSK_edit_label[6]->box(FL_DOWN_BOX);
          FSK_edit_label[6]->color(FL_BACKGROUND2_COLOR);
          FSK_edit_label[6]->selection_color(FL_SELECTION_COLOR);
          FSK_edit_label[6]->labeltype(FL_NORMAL_LABEL);
          FSK_edit_label[6]->labelfont(0);
          FSK_edit_label[6]->labelsize(14);
          FSK_edit_label[6]->labelcolor(FL_FOREGROUND_COLOR);
          FSK_edit_label[6]->callback((Fl_Callback*)cb_FSK_edit_label6);
          FSK_edit_label[6]->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          FSK_edit_label[6]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* FSK_edit_label[6]
        { FSK_edit_msg[6] = new Fl_Input2(90, 195, 475, 65);
          FSK_edit_msg[6]->type(4);
          FSK_edit_msg[6]->box(FL_DOWN_BOX);
          FSK_edit_msg[6]->color(FL_BACKGROUND2_COLOR);
          FSK_edit_msg[6]->selection_color(FL_SELECTION_COLOR);
          FSK_edit_msg[6]->labeltype(FL_NORMAL_LABEL);
          FSK_edit_msg[6]->labelfont(0);
          FSK_edit_msg[6]->labelsize(14);
          FSK_edit_msg[6]->labelcolor(FL_FOREGROUND_COLOR);
          FSK_edit_msg[6]->callback((Fl_Callback*)cb_FSK_edit_msg6);
          FSK_edit_msg[6]->align(Fl_Align(FL_ALIGN_LEFT));
          FSK_edit_msg[6]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* FSK_edit_msg[6]
        { FSK_edit_label[7] = new Fl_Input2(5, 284, 80, 22, _("F8"));
          FSK_edit_label[7]->box(FL_DOWN_BOX);
          FSK_edit_label[7]->color(FL_BACKGROUND2_COLOR);
          FSK_edit_label[7]->selection_color(FL_SELECTION_COLOR);
          FSK_edit_label[7]->labeltype(FL_NORMAL_LABEL);
          FSK_edit_label[7]->labelfont(0);
          FSK_edit_label[7]->labelsize(14);
          FSK_edit_label[7]->labelcolor(FL_FOREGROUND_COLOR);
          FSK_edit_label[7]->callback((Fl_Callback*)cb_FSK_edit_label7);
          FSK_edit_label[7]->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          FSK_edit_label[7]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* FSK_edit_label[7]
        { FSK_edit_msg[7] = new Fl_Input2(90, 265, 475, 65);
          FSK_edit_msg[7]->type(4);
          FSK_edit_msg[7]->box(FL_DOWN_BOX);
          FSK_edit_msg[7]->color(FL_BACKGROUND2_COLOR);
          FSK_edit_msg[7]->selection_color(FL_SELECTION_COLOR);
          FSK_edit_msg[7]->labeltype(FL_NORMAL_LABEL);
          FSK_edit_msg[7]->labelfont(0);
          FSK_edit_msg[7]->labelsize(14);
          FSK_edit_msg[7]->labelcolor(FL_FOREGROUND_COLOR);
          FSK_edit_msg[7]->callback((Fl_Callback*)cb_FSK_edit_msg7);
          FSK_edit_msg[7]->align(Fl_Align(FL_ALIGN_LEFT));
          FSK_edit_msg[7]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* FSK_edit_msg[7]
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 25, 570, 320, _("F9-F12"));
        { new Fl_Box(24, 30, 90, 20, _("Label"));
        } // Fl_Box* o
        { new Fl_Box(227, 30, 240, 20, _("Message Text"));
        } // Fl_Box* o
        { FSK_edit_label[8] = new Fl_Input2(5, 73, 80, 22, _("F9"));
          FSK_edit_label[8]->box(FL_DOWN_BOX);
          FSK_edit_label[8]->color(FL_BACKGROUND2_COLOR);
          FSK_edit_label[8]->selection_color(FL_SELECTION_COLOR);
          FSK_edit_label[8]->labeltype(FL_NORMAL_LABEL);
          FSK_edit_label[8]->labelfont(0);
          FSK_edit_label[8]->labelsize(14);
          FSK_edit_label[8]->labelcolor(FL_FOREGROUND_COLOR);
          FSK_edit_label[8]->callback((Fl_Callback*)cb_FSK_edit_label8);
          FSK_edit_label[8]->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          FSK_edit_label[8]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* FSK_edit_label[8]
        { FSK_edit_msg[8] = new Fl_Input2(90, 55, 475, 65);
          FSK_edit_msg[8]->type(4);
          FSK_edit_msg[8]->box(FL_DOWN_BOX);
          FSK_edit_msg[8]->color(FL_BACKGROUND2_COLOR);
          FSK_edit_msg[8]->selection_color(FL_SELECTION_COLOR);
          FSK_edit_msg[8]->labeltype(FL_NORMAL_LABEL);
          FSK_edit_msg[8]->labelfont(0);
          FSK_edit_msg[8]->labelsize(14);
          FSK_edit_msg[8]->labelcolor(FL_FOREGROUND_COLOR);
          FSK_edit_msg[8]->callback((Fl_Callback*)cb_FSK_edit_msg8);
          FSK_edit_msg[8]->align(Fl_Align(FL_ALIGN_LEFT));
          FSK_edit_msg[8]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* FSK_edit_msg[8]
        { FSK_edit_label[9] = new Fl_Input2(5, 143, 80, 22, _("F10"));
          FSK_edit_label[9]->box(FL_DOWN_BOX);
          FSK_edit_label[9]->color(FL_BACKGROUND2_COLOR);
          FSK_edit_label[9]->selection_color(FL_SELECTION_COLOR);
          FSK_edit_label[9]->labeltype(FL_NORMAL_LABEL);
          FSK_edit_label[9]->labelfont(0);
          FSK_edit_label[9]->labelsize(14);
          FSK_edit_label[9]->labelcolor(FL_FOREGROUND_COLOR);
          FSK_edit_label[9]->callback((Fl_Callback*)cb_FSK_edit_label9);
          FSK_edit_label[9]->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          FSK_edit_label[9]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* FSK_edit_label[9]
        { FSK_edit_msg[9] = new Fl_Input2(90, 125, 475, 65);
          FSK_edit_msg[9]->type(4);
          FSK_edit_msg[9]->box(FL_DOWN_BOX);
          FSK_edit_msg[9]->color(FL_BACKGROUND2_COLOR);
          FSK_edit_msg[9]->selection_color(FL_SELECTION_COLOR);
          FSK_edit_msg[9]->labeltype(FL_NORMAL_LABEL);
          FSK_edit_msg[9]->labelfont(0);
          FSK_edit_msg[9]->labelsize(14);
          FSK_edit_msg[9]->labelcolor(FL_FOREGROUND_COLOR);
          FSK_edit_msg[9]->callback((Fl_Callback*)cb_FSK_edit_msg9);
          FSK_edit_msg[9]->align(Fl_Align(FL_ALIGN_LEFT));
          FSK_edit_msg[9]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* FSK_edit_msg[9]
        { FSK_edit_label[10] = new Fl_Input2(5, 213, 80, 22, _("F11"));
          FSK_edit_label[10]->box(FL_DOWN_BOX);
          FSK_edit_label[10]->color(FL_BACKGROUND2_COLOR);
          FSK_edit_label[10]->selection_color(FL_SELECTION_COLOR);
          FSK_edit_label[10]->labeltype(FL_NORMAL_LABEL);
          FSK_edit_label[10]->labelfont(0);
          FSK_edit_label[10]->labelsize(14);
          FSK_edit_label[10]->labelcolor(FL_FOREGROUND_COLOR);
          FSK_edit_label[10]->callback((Fl_Callback*)cb_FSK_edit_labela);
          FSK_edit_label[10]->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          FSK_edit_label[10]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* FSK_edit_label[10]
        { FSK_edit_msg[10] = new Fl_Input2(90, 195, 475, 65);
          FSK_edit_msg[10]->type(4);
          FSK_edit_msg[10]->box(FL_DOWN_BOX);
          FSK_edit_msg[10]->color(FL_BACKGROUND2_COLOR);
          FSK_edit_msg[10]->selection_color(FL_SELECTION_COLOR);
          FSK_edit_msg[10]->labeltype(FL_NORMAL_LABEL);
          FSK_edit_msg[10]->labelfont(0);
          FSK_edit_msg[10]->labelsize(14);
          FSK_edit_msg[10]->labelcolor(FL_FOREGROUND_COLOR);
          FSK_edit_msg[10]->callback((Fl_Callback*)cb_FSK_edit_msga);
          FSK_edit_msg[10]->align(Fl_Align(FL_ALIGN_LEFT));
          FSK_edit_msg[10]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* FSK_edit_msg[10]
        { FSK_edit_label[11] = new Fl_Input2(5, 283, 80, 22, _("F12"));
          FSK_edit_label[11]->box(FL_DOWN_BOX);
          FSK_edit_label[11]->color(FL_BACKGROUND2_COLOR);
          FSK_edit_label[11]->selection_color(FL_SELECTION_COLOR);
          FSK_edit_label[11]->labeltype(FL_NORMAL_LABEL);
          FSK_edit_label[11]->labelfont(0);
          FSK_edit_label[11]->labelsize(14);
          FSK_edit_label[11]->labelcolor(FL_FOREGROUND_COLOR);
          FSK_edit_label[11]->callback((Fl_Callback*)cb_FSK_edit_labelb);
          FSK_edit_label[11]->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          FSK_edit_label[11]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* FSK_edit_label[11]
        { FSK_edit_msg[11] = new Fl_Input2(90, 265, 475, 65);
          FSK_edit_msg[11]->type(4);
          FSK_edit_msg[11]->box(FL_DOWN_BOX);
          FSK_edit_msg[11]->color(FL_BACKGROUND2_COLOR);
          FSK_edit_msg[11]->selection_color(FL_SELECTION_COLOR);
          FSK_edit_msg[11]->labeltype(FL_NORMAL_LABEL);
          FSK_edit_msg[11]->labelfont(0);
          FSK_edit_msg[11]->labelsize(14);
          FSK_edit_msg[11]->labelcolor(FL_FOREGROUND_COLOR);
          FSK_edit_msg[11]->callback((Fl_Callback*)cb_FSK_edit_msgb);
          FSK_edit_msg[11]->align(Fl_Align(FL_ALIGN_LEFT));
          FSK_edit_msg[11]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* FSK_edit_msg[11]
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Tabs* o
    { Fl_Group* o = new Fl_Group(575, 27, 90, 43);
      o->box(FL_ENGRAVED_FRAME);
      { new Fl_Box(579, 29, 82, 20, _("\'[\' Send"));
      } // Fl_Box* o
      { new Fl_Box(579, 49, 82, 20, _("\']\' Recv"));
      } // Fl_Box* o
      o->end();
    } // Fl_Group* o
    { FSK_btn_cancel_edit = new Fl_Button(575, 88, 90, 22, _("Cancel"));
      FSK_btn_cancel_edit->tooltip(_("Exit editor, discard changes"));
      FSK_btn_cancel_edit->callback((Fl_Callback*)cb_FSK_btn_cancel_edit);
    } // Fl_Button* FSK_btn_cancel_edit
    { FSK_btn_apply_edit = new Fl_Button(575, 114, 90, 22, _("Apply"));
      FSK_btn_apply_edit->tooltip(_("Apply current changes to function keys"));
      FSK_btn_apply_edit->callback((Fl_Callback*)cb_FSK_btn_apply_edit);
    } // Fl_Button* FSK_btn_apply_edit
    { FSK_btn_FSK_done_edit = new Fl_Button(575, 141, 90, 22, _("Close"));
      FSK_btn_FSK_done_edit->tooltip(_("Apply changes and close editor"));
      FSK_btn_FSK_done_edit->callback((Fl_Callback*)cb_FSK_btn_FSK_done_edit);
    } // Fl_Button* FSK_btn_FSK_done_edit
    o->end();
    o->resizable(o);
  } // Fl_Double_Window* o
  return w;
}

Fl_ComboBox *select_fskioPORT=(Fl_ComboBox *)0;

static void cb_select_fskioPORT(Fl_ComboBox* o, void*) {
  progStatus.FSK_PORT = o->value();
}

Fl_Light_Button *btn_fskioCONNECT=(Fl_Light_Button *)0;

static void cb_btn_fskioCONNECT(Fl_Light_Button* o, void*) {
  if (o->value() == 0) {
  FSK_close_port();
  btn_fskioCAT->activate();
  btn_fskioAUX->activate();
  btn_fskioSEP->activate();
  progStatus.FSK_CONNECTED = 0;
}
else if (!FSK_open_port()) {
  o->value(0);
  btn_fskioCAT->activate();
  btn_fskioAUX->activate();
  btn_fskioSEP->activate();
  progStatus.FSK_CONNECTED = 0;
} else {
  btn_fskioCAT->value(0); btn_fskioCAT->deactivate();
  btn_fskioAUX->value(0); btn_fskioAUX->deactivate();
  btn_fskioSEP->value(0); btn_fskioSEP->deactivate();
  progStatus.FSK_CONNECTED = 1;
}
FSK_open_port();
progStatus.FSK_SHARED = FSK_USES_FSK;
}

Fl_Check_Button *btn_fskioCAT=(Fl_Check_Button *)0;

static void cb_btn_fskioCAT(Fl_Check_Button* o, void*) {
  if (o->value()) {
  progStatus.FSK_SHARED = FSK_USES_CAT;
  btn_fskioAUX->value(0); btn_fskioAUX->deactivate();
  btn_fskioSEP->value(0); btn_fskioSEP->deactivate();
  btn_fskioCONNECT->value(0); btn_fskioCONNECT->deactivate();
  btn_fskioSHARED->value(0); btn_fskioSHARED->deactivate();
  select_fskioPORT->value("NONE"); select_fskioPORT->deactivate();
}else {
  progStatus.FSK_SHARED = FSK_USES_FSK;
  btn_fskioCONNECT->activate();
  btn_fskioAUX->activate();
  btn_fskioCAT->activate();
  btn_fskioSEP->activate();
  btn_fskioSHARED->activate();
  select_fskioPORT->activate();
};
}

Fl_Check_Button *btn_fskioAUX=(Fl_Check_Button *)0;

static void cb_btn_fskioAUX(Fl_Check_Button* o, void*) {
  if (o->value()) {
  progStatus.FSK_SHARED = FSK_USES_AUX;
  btn_fskioCAT->value(0); btn_fskioCAT->deactivate();
  btn_fskioSEP->value(0); btn_fskioSEP->deactivate();
  btn_fskioCONNECT->value(0); btn_fskioCONNECT->deactivate();
  btn_fskioSHARED->value(0); btn_fskioSHARED->deactivate();
  select_fskioPORT->value("NONE"); select_fskioPORT->deactivate();
}else {
  progStatus.FSK_SHARED = FSK_USES_FSK;
  btn_fskioCONNECT->activate();
  btn_fskioAUX->activate();
  btn_fskioCAT->activate();
  btn_fskioSEP->activate();
  btn_fskioSHARED->activate();
  select_fskioPORT->activate();
};
}

Fl_Check_Button *btn_fskioSEP=(Fl_Check_Button *)0;

static void cb_btn_fskioSEP(Fl_Check_Button* o, void*) {
  if (o->value()) {
  progStatus.FSK_SHARED = FSK_USES_SEP;
  btn_fskioAUX->value(0); btn_fskioAUX->deactivate();
  btn_fskioCAT->value(0); btn_fskioCAT->deactivate();
  btn_fskioCONNECT->value(0); btn_fskioCONNECT->deactivate();
  btn_fskioSHARED->value(0); btn_fskioSHARED->deactivate();
  select_fskioPORT->value("NONE"); select_fskioPORT->deactivate();
}else {
  progStatus.FSK_SHARED = FSK_USES_FSK;
  btn_fskioCONNECT->activate();
  btn_fskioAUX->activate();
  btn_fskioCAT->activate();
  btn_fskioSEP->activate();
  btn_fskioSHARED->activate();
  select_fskioPORT->activate();
};
}

Fl_Check_Button *btn_fskioSHARED=(Fl_Check_Button *)0;

static void cb_btn_fskioSHARED(Fl_Check_Button* o, void*) {
  if (o->value()) {
  progStatus.FSK_SHARED = FSK_USES_CWIO;
  btn_fskioAUX->value(0); btn_fskioAUX->deactivate();
  btn_fskioCAT->value(0); btn_fskioCAT->deactivate();
  btn_fskioSEP->value(0); btn_fskioSEP->deactivate();
  btn_fskioCONNECT->value(0); btn_fskioCONNECT->deactivate();
  select_fskioPORT->value("NONE"); select_fskioPORT->deactivate();
}else {
  progStatus.FSK_SHARED = FSK_USES_FSK;
  btn_fskioCONNECT->activate();
  btn_fskioAUX->activate();
  btn_fskioCAT->activate();
  btn_fskioSEP->activate();
  btn_fskioSHARED->activate();
  select_fskioPORT->activate();
};
}

Fl_Check_Button *btn_fskioINVERTED=(Fl_Check_Button *)0;

static void cb_btn_fskioINVERTED(Fl_Check_Button* o, void*) {
  progStatus.FSK_INVERTED = o->value();
}

Fl_Check_Button *btn_fskioSTOPBITS=(Fl_Check_Button *)0;

static void cb_btn_fskioSTOPBITS(Fl_Check_Button* o, void*) {
  progStatus.FSK_STOPBITS = o->value();
}

Fl_ListBox *listbox_fskioKEYLINE=(Fl_ListBox *)0;

static void cb_listbox_fskioKEYLINE(Fl_ListBox* o, void*) {
  progStatus.FSK_KEYLINE = o->index();
}

Fl_Spinner *cntr_fskioPTT=(Fl_Spinner *)0;

static void cb_cntr_fskioPTT(Fl_Spinner* o, void*) {
  progStatus.FSK_PTT = o->value();
}

Fl_Double_Window* fskio_config_dialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(670, 100, _("FSK Configuration"));
    w = o; if (w) {/* empty */}
    { Fl_Group* o = new Fl_Group(2, 3, 666, 100);
      o->box(FL_ENGRAVED_FRAME);
      { Fl_ComboBox* o = select_fskioPORT = new Fl_ComboBox(73, 73, 496, 23, _("Ser. Port"));
        select_fskioPORT->tooltip(_("FSKIO serial port"));
        select_fskioPORT->box(FL_DOWN_BOX);
        select_fskioPORT->color((Fl_Color)53);
        select_fskioPORT->selection_color(FL_BACKGROUND_COLOR);
        select_fskioPORT->labeltype(FL_NORMAL_LABEL);
        select_fskioPORT->labelfont(0);
        select_fskioPORT->labelsize(14);
        select_fskioPORT->labelcolor(FL_FOREGROUND_COLOR);
        select_fskioPORT->callback((Fl_Callback*)cb_select_fskioPORT);
        select_fskioPORT->align(Fl_Align(FL_ALIGN_LEFT));
        select_fskioPORT->when(FL_WHEN_RELEASE);
        o->value(progStatus.FSK_PORT.c_str());
        select_fskioPORT->end();
      } // Fl_ComboBox* select_fskioPORT
      { Fl_Light_Button* o = btn_fskioCONNECT = new Fl_Light_Button(578, 73, 80, 23, _("Connect"));
        btn_fskioCONNECT->callback((Fl_Callback*)cb_btn_fskioCONNECT);
        o->value(progStatus.FSK_CONNECTED);
      } // Fl_Light_Button* btn_fskioCONNECT
      { Fl_Check_Button* o = btn_fskioCAT = new Fl_Check_Button(111, 15, 23, 15, _("Use CAT"));
        btn_fskioCAT->tooltip(_("Use DTR/RTS on CAT serial port"));
        btn_fskioCAT->down_box(FL_DOWN_BOX);
        btn_fskioCAT->callback((Fl_Callback*)cb_btn_fskioCAT);
        btn_fskioCAT->align(Fl_Align(FL_ALIGN_LEFT));
        o->value(progStatus.FSK_SHARED == FSK_USES_CAT);
      } // Fl_Check_Button* btn_fskioCAT
      { Fl_Check_Button* o = btn_fskioAUX = new Fl_Check_Button(112, 46, 23, 15, _("Use AUX"));
        btn_fskioAUX->tooltip(_("Use DTR/RTS on Auxiliary serial port"));
        btn_fskioAUX->down_box(FL_DOWN_BOX);
        btn_fskioAUX->callback((Fl_Callback*)cb_btn_fskioAUX);
        btn_fskioAUX->align(Fl_Align(FL_ALIGN_LEFT));
        o->value(progStatus.FSK_SHARED == FSK_USES_AUX);
      } // Fl_Check_Button* btn_fskioAUX
      { Fl_Check_Button* o = btn_fskioSEP = new Fl_Check_Button(245, 15, 23, 15, _("Use SEP"));
        btn_fskioSEP->tooltip(_("Use DTR/RTS Separate serial port"));
        btn_fskioSEP->down_box(FL_DOWN_BOX);
        btn_fskioSEP->callback((Fl_Callback*)cb_btn_fskioSEP);
        btn_fskioSEP->align(Fl_Align(FL_ALIGN_LEFT));
        o->value(progStatus.FSK_SHARED == FSK_USES_SEP);
      } // Fl_Check_Button* btn_fskioSEP
      { Fl_Check_Button* o = btn_fskioSHARED = new Fl_Check_Button(245, 46, 23, 15, _("CWIO shared"));
        btn_fskioSHARED->tooltip(_("Use DTR/RTS cwio shared port"));
        btn_fskioSHARED->down_box(FL_DOWN_BOX);
        btn_fskioSHARED->callback((Fl_Callback*)cb_btn_fskioSHARED);
        btn_fskioSHARED->align(Fl_Align(FL_ALIGN_LEFT));
        o->value(progStatus.FSK_SHARED == FSK_USES_CWIO);
      } // Fl_Check_Button* btn_fskioSHARED
      { Fl_Check_Button* o = btn_fskioINVERTED = new Fl_Check_Button(376, 15, 23, 15, _("Inverted"));
        btn_fskioINVERTED->tooltip(_("DTR/RTS signaling is inverted\n(-) keying"));
        btn_fskioINVERTED->down_box(FL_DOWN_BOX);
        btn_fskioINVERTED->callback((Fl_Callback*)cb_btn_fskioINVERTED);
        btn_fskioINVERTED->align(Fl_Align(FL_ALIGN_LEFT));
        o->value(progStatus.FSK_INVERTED);
      } // Fl_Check_Button* btn_fskioINVERTED
      { Fl_Check_Button* o = btn_fskioSTOPBITS = new Fl_Check_Button(376, 46, 23, 15, _("1.5 stop bits"));
        btn_fskioSTOPBITS->tooltip(_("Enabled - 1.5 stop bits\nDisable - 2 stop bits"));
        btn_fskioSTOPBITS->down_box(FL_DOWN_BOX);
        btn_fskioSTOPBITS->callback((Fl_Callback*)cb_btn_fskioSTOPBITS);
        btn_fskioSTOPBITS->align(Fl_Align(FL_ALIGN_LEFT));
        o->value(progStatus.FSK_STOPBITS);
      } // Fl_Check_Button* btn_fskioSTOPBITS
      { Fl_ListBox* o = listbox_fskioKEYLINE = new Fl_ListBox(593, 41, 65, 24, _("FSK Keyline"));
        listbox_fskioKEYLINE->tooltip(_("Select either DTR or RTS for keyline"));
        listbox_fskioKEYLINE->box(FL_DOWN_BOX);
        listbox_fskioKEYLINE->color(FL_BACKGROUND2_COLOR);
        listbox_fskioKEYLINE->selection_color(FL_BACKGROUND_COLOR);
        listbox_fskioKEYLINE->labeltype(FL_NORMAL_LABEL);
        listbox_fskioKEYLINE->labelfont(0);
        listbox_fskioKEYLINE->labelsize(14);
        listbox_fskioKEYLINE->labelcolor(FL_FOREGROUND_COLOR);
        listbox_fskioKEYLINE->callback((Fl_Callback*)cb_listbox_fskioKEYLINE);
        listbox_fskioKEYLINE->align(Fl_Align(FL_ALIGN_LEFT));
        listbox_fskioKEYLINE->when(FL_WHEN_RELEASE);
        o->add("None|RTS|DTR");
        o->index(progStatus.FSK_KEYLINE);
        listbox_fskioKEYLINE->end();
      } // Fl_ListBox* listbox_fskioKEYLINE
      { Fl_Spinner* o = cntr_fskioPTT = new Fl_Spinner(608, 10, 50, 25, _("PTT delay"));
        cntr_fskioPTT->tooltip(_("PTT delay before keydown\n0 = Break-in"));
        cntr_fskioPTT->minimum(0);
        cntr_fskioPTT->value(0);
        cntr_fskioPTT->callback((Fl_Callback*)cb_cntr_fskioPTT);
        o->value(progStatus.FSK_PTT);
      } // Fl_Spinner* cntr_fskioPTT
      o->end();
    } // Fl_Group* o
    o->end();
  } // Fl_Double_Window* o
  return w;
}
