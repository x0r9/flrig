// generated by Fast Light User Interface Designer (fluid) version 1.0305

#include "gettext.h"
#include "cwioUI.h"
#include "cwio.h"
static const char ps[] = "~%&+={}<>@"; 
static const char szProsigns[] = "~|%|&|+|=|{|}|<|>|@"; 

Fl_Input2 *txt_to_send=(Fl_Input2 *)0;

static void cb_txt_to_send(Fl_Input2*, void*) {
  control_function_keys();
}

Fl_Value_Slider2 *sldr_cwioWPM=(Fl_Value_Slider2 *)0;

static void cb_sldr_cwioWPM(Fl_Value_Slider2* o, void*) {
  progStatus.cwioWPM = (int)o->value();
}

Fl_Button *btn_cwio_config=(Fl_Button *)0;

static void cb_btn_cwio_config(Fl_Button*, void*) {
  open_cwio_config();
}

Fl_Button *btn_cwio_clear=(Fl_Button *)0;

static void cb_btn_cwio_clear(Fl_Button*, void*) {
  cwio_clear_text();
}

Fl_Light_Button *btn_cwioKEY=(Fl_Light_Button *)0;

static void cb_btn_cwioKEY(Fl_Light_Button* o, void*) {
  cwio_key (o->value());
}

Fl_Light_Button *btn_cwioSEND=(Fl_Light_Button *)0;

static void cb_btn_cwioSEND(Fl_Light_Button* o, void*) {
  send_text(o->value());
}

static void cb_btn_msg(Fl_Button*, void*) {
  exec_msg(0);
}

static void cb_btn_msg1(Fl_Button*, void*) {
  exec_msg(1);
}

static void cb_btn_msg2(Fl_Button*, void*) {
  exec_msg(2);
}

static void cb_btn_msg3(Fl_Button*, void*) {
  exec_msg(3);
}

static void cb_btn_msg4(Fl_Button*, void*) {
  exec_msg(4);
}

static void cb_btn_msg5(Fl_Button*, void*) {
  exec_msg(5);
}

static void cb_btn_msg6(Fl_Button*, void*) {
  exec_msg(6);
}

static void cb_btn_msg7(Fl_Button*, void*) {
  exec_msg(7);
}

static void cb_btn_msg8(Fl_Button*, void*) {
  exec_msg(8);
}

static void cb_btn_msg9(Fl_Button*, void*) {
  exec_msg(9);
}

static void cb_btn_msga(Fl_Button*, void*) {
  exec_msg(10);
}

Fl_Button *btn_msg[12]={(Fl_Button *)0};

static void cb_btn_msgb(Fl_Button*, void*) {
  exec_msg(11);
}

Fl_Double_Window* cwio_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(670, 130, _("CW keying"));
    w = o; if (w) {/* empty */}
    { txt_to_send = new Fl_Input2(2, 2, 666, 68);
      txt_to_send->type(4);
      txt_to_send->box(FL_DOWN_BOX);
      txt_to_send->color(FL_BACKGROUND2_COLOR);
      txt_to_send->selection_color(FL_SELECTION_COLOR);
      txt_to_send->labeltype(FL_NORMAL_LABEL);
      txt_to_send->labelfont(0);
      txt_to_send->labelsize(14);
      txt_to_send->labelcolor(FL_FOREGROUND_COLOR);
      txt_to_send->callback((Fl_Callback*)cb_txt_to_send);
      txt_to_send->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      txt_to_send->when(FL_WHEN_CHANGED);
      Fl_Group::current()->resizable(txt_to_send);
    } // Fl_Input2* txt_to_send
    { Fl_Group* o = new Fl_Group(0, 70, 670, 60);
      { Fl_Value_Slider2* o = sldr_cwioWPM = new Fl_Value_Slider2(4, 74, 225, 20, _("char WPM"));
        sldr_cwioWPM->tooltip(_("My transmit CW WPM"));
        sldr_cwioWPM->type(5);
        sldr_cwioWPM->box(FL_DOWN_BOX);
        sldr_cwioWPM->color((Fl_Color)246);
        sldr_cwioWPM->selection_color((Fl_Color)4);
        sldr_cwioWPM->labeltype(FL_NORMAL_LABEL);
        sldr_cwioWPM->labelfont(0);
        sldr_cwioWPM->labelsize(14);
        sldr_cwioWPM->labelcolor(FL_FOREGROUND_COLOR);
        sldr_cwioWPM->minimum(5);
        sldr_cwioWPM->maximum(100);
        sldr_cwioWPM->step(1);
        sldr_cwioWPM->value(20);
        sldr_cwioWPM->textsize(14);
        sldr_cwioWPM->callback((Fl_Callback*)cb_sldr_cwioWPM);
        sldr_cwioWPM->align(Fl_Align(FL_ALIGN_RIGHT));
        sldr_cwioWPM->when(FL_WHEN_CHANGED);
        o->value(progStatus.cwioWPM);
      } // Fl_Value_Slider2* sldr_cwioWPM
      { btn_cwio_config = new Fl_Button(317, 73, 60, 22, _("Config"));
        btn_cwio_config->tooltip(_("Clear transmit text"));
        btn_cwio_config->callback((Fl_Callback*)cb_btn_cwio_config);
      } // Fl_Button* btn_cwio_config
      { btn_cwio_clear = new Fl_Button(400, 73, 60, 22, _("Clear"));
        btn_cwio_clear->tooltip(_("Clear transmit text"));
        btn_cwio_clear->callback((Fl_Callback*)cb_btn_cwio_clear);
      } // Fl_Button* btn_cwio_clear
      { btn_cwioKEY = new Fl_Light_Button(483, 73, 50, 22, _("KEY"));
        btn_cwioKEY->tooltip(_("Key Down / Up"));
        btn_cwioKEY->callback((Fl_Callback*)cb_btn_cwioKEY);
      } // Fl_Light_Button* btn_cwioKEY
      { btn_cwioSEND = new Fl_Light_Button(557, 73, 105, 22, _("Send/Pause"));
        btn_cwioSEND->tooltip(_("Send / Pause sending characters"));
        btn_cwioSEND->callback((Fl_Callback*)cb_btn_cwioSEND);
      } // Fl_Light_Button* btn_cwioSEND
      { Fl_Group* o = new Fl_Group(2, 98, 220, 30);
        o->box(FL_ENGRAVED_BOX);
        { btn_msg[0] = new Fl_Button(5, 102, 50, 22, _("F 1"));
          btn_msg[0]->tooltip(_("Action - Function Key Left click\nEdit - Control left click"));
          btn_msg[0]->callback((Fl_Callback*)cb_btn_msg);
        } // Fl_Button* btn_msg[0]
        { btn_msg[1] = new Fl_Button(59, 102, 50, 22, _("F 2"));
          btn_msg[1]->tooltip(_("Action - Function Key Left click\nEdit - Control left click"));
          btn_msg[1]->callback((Fl_Callback*)cb_btn_msg1);
        } // Fl_Button* btn_msg[1]
        { btn_msg[2] = new Fl_Button(113, 102, 50, 22, _("F 3"));
          btn_msg[2]->tooltip(_("Action - Function Key Left click\nEdit - Control left click"));
          btn_msg[2]->callback((Fl_Callback*)cb_btn_msg2);
        } // Fl_Button* btn_msg[2]
        { btn_msg[3] = new Fl_Button(168, 102, 50, 22, _("F 4"));
          btn_msg[3]->tooltip(_("Action - Function Key Left click\nEdit - Control left click"));
          btn_msg[3]->callback((Fl_Callback*)cb_btn_msg3);
        } // Fl_Button* btn_msg[3]
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(225, 98, 220, 30);
        o->box(FL_ENGRAVED_BOX);
        { btn_msg[4] = new Fl_Button(229, 102, 50, 22, _("F 5"));
          btn_msg[4]->tooltip(_("Action - Function Key Left click\nEdit - Control left click"));
          btn_msg[4]->callback((Fl_Callback*)cb_btn_msg4);
        } // Fl_Button* btn_msg[4]
        { btn_msg[5] = new Fl_Button(283, 102, 50, 22, _("F 6"));
          btn_msg[5]->tooltip(_("Action - Function Key Left click\nEdit - Control left click"));
          btn_msg[5]->callback((Fl_Callback*)cb_btn_msg5);
        } // Fl_Button* btn_msg[5]
        { btn_msg[6] = new Fl_Button(337, 102, 50, 22, _("F 7"));
          btn_msg[6]->tooltip(_("Action - Function Key Left click\nEdit - Control left click"));
          btn_msg[6]->callback((Fl_Callback*)cb_btn_msg6);
        } // Fl_Button* btn_msg[6]
        { btn_msg[7] = new Fl_Button(391, 102, 50, 22, _("F 8"));
          btn_msg[7]->tooltip(_("Action - Function Key Left click\nEdit - Control left click"));
          btn_msg[7]->callback((Fl_Callback*)cb_btn_msg7);
        } // Fl_Button* btn_msg[7]
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(448, 98, 220, 30);
        o->box(FL_ENGRAVED_BOX);
        { btn_msg[8] = new Fl_Button(451, 102, 50, 22, _("F 9"));
          btn_msg[8]->tooltip(_("Action - Function Key Left click\nEdit - Control left click"));
          btn_msg[8]->callback((Fl_Callback*)cb_btn_msg8);
        } // Fl_Button* btn_msg[8]
        { btn_msg[9] = new Fl_Button(505, 102, 50, 22, _("F 10"));
          btn_msg[9]->tooltip(_("Action - Function Key Left click\nEdit - Control left click"));
          btn_msg[9]->callback((Fl_Callback*)cb_btn_msg9);
        } // Fl_Button* btn_msg[9]
        { btn_msg[10] = new Fl_Button(559, 102, 50, 22, _("F 11"));
          btn_msg[10]->tooltip(_("Action - Function Key Left click\nEdit - Control left click"));
          btn_msg[10]->callback((Fl_Callback*)cb_btn_msga);
        } // Fl_Button* btn_msg[10]
        { btn_msg[11] = new Fl_Button(614, 102, 50, 22, _("F 12"));
          btn_msg[11]->tooltip(_("Action - Function Key Left click\nEdit - Control left click"));
          btn_msg[11]->callback((Fl_Callback*)cb_btn_msgb);
        } // Fl_Button* btn_msg[11]
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    o->end();
  } // Fl_Double_Window* o
  return w;
}

static void cb_edit_label(Fl_Input2*, void*) {
  label_cb(1);
}

static void cb_edit_msg(Fl_Input2*, void*) {
  msg_cb(1);
}

static void cb_edit_label1(Fl_Input2*, void*) {
  label_cb(2);
}

static void cb_edit_msg1(Fl_Input2*, void*) {
  msg_cb(2);
}

static void cb_edit_label2(Fl_Input2*, void*) {
  label_cb(3);
}

static void cb_edit_msg2(Fl_Input2*, void*) {
  msg_cb(3);
}

static void cb_edit_label3(Fl_Input2*, void*) {
  label_cb(4);
}

static void cb_edit_msg3(Fl_Input2*, void*) {
  msg_cb(4);
}

static void cb_edit_label4(Fl_Input2*, void*) {
  label_cb(5);
}

static void cb_edit_msg4(Fl_Input2*, void*) {
  msg_cb(5);
}

static void cb_edit_label5(Fl_Input2*, void*) {
  label_cb(6);
}

static void cb_edit_msg5(Fl_Input2*, void*) {
  msg_cb(6);
}

static void cb_edit_label6(Fl_Input2*, void*) {
  label_cb(7);
}

static void cb_edit_msg6(Fl_Input2*, void*) {
  msg_cb(7);
}

static void cb_edit_label7(Fl_Input2*, void*) {
  label_cb(8);
}

static void cb_edit_msg7(Fl_Input2*, void*) {
  msg_cb(8);
}

static void cb_edit_label8(Fl_Input2*, void*) {
  label_cb(9);
}

static void cb_edit_msg8(Fl_Input2*, void*) {
  msg_cb(9);
}

static void cb_edit_label9(Fl_Input2*, void*) {
  label_cb(10);
}

static void cb_edit_msg9(Fl_Input2*, void*) {
  msg_cb(10);
}

static void cb_edit_labela(Fl_Input2*, void*) {
  label_cb(11);
}

static void cb_edit_msga(Fl_Input2*, void*) {
  msg_cb(11);
}

Fl_Input2 *edit_label[12]={(Fl_Input2 *)0};

static void cb_edit_labelb(Fl_Input2*, void*) {
  label_cb(12);
}

Fl_Input2 *edit_msg[12]={(Fl_Input2 *)0};

static void cb_edit_msgb(Fl_Input2*, void*) {
  msg_cb(12);
}

Fl_ListBox *listbox_BT=(Fl_ListBox *)0;

static void cb_listbox_BT(Fl_ListBox* o, void*) {
  int c = o->index();
progStatus.BT[0] = ps[c];
morse->init();
}

Fl_ListBox *listbox_AA=(Fl_ListBox *)0;

static void cb_listbox_AA(Fl_ListBox* o, void*) {
  int c = o->index();
progStatus.AA[0] = ps[c];
morse->init();
}

Fl_ListBox *listbox_AS=(Fl_ListBox *)0;

static void cb_listbox_AS(Fl_ListBox* o, void*) {
  int c = o->index();
progStatus.AS[0] = ps[c];
morse->init();
}

Fl_ListBox *listbox_AR=(Fl_ListBox *)0;

static void cb_listbox_AR(Fl_ListBox* o, void*) {
  int c = o->index();
progStatus.AR[0] = ps[c];
morse->init();
}

Fl_ListBox *listbox_SK=(Fl_ListBox *)0;

static void cb_listbox_SK(Fl_ListBox* o, void*) {
  int c = o->index();
progStatus.SK[0] = ps[c];
morse->init();
}

Fl_ListBox *listbox_KN=(Fl_ListBox *)0;

static void cb_listbox_KN(Fl_ListBox* o, void*) {
  int c = o->index();
progStatus.KN[0] = ps[c];
morse->init();
}

Fl_ListBox *listbox_INT=(Fl_ListBox *)0;

static void cb_listbox_INT(Fl_ListBox* o, void*) {
  int c = o->index();
progStatus.INT[0] = ps[c];
morse->init();
}

Fl_ListBox *listbox_HM=(Fl_ListBox *)0;

static void cb_listbox_HM(Fl_ListBox* o, void*) {
  int c = o->index();
progStatus.HM[0] = ps[c];
morse->init();
}

Fl_ListBox *listbox_VE=(Fl_ListBox *)0;

static void cb_listbox_VE(Fl_ListBox* o, void*) {
  int c = o->index();
progStatus.VE[0] = ps[c];
morse->init();
}

Fl_Button *btn_cancel_edit=(Fl_Button *)0;

static void cb_btn_cancel_edit(Fl_Button*, void*) {
  cancel_edit();
}

Fl_Button *btn_apply_edit=(Fl_Button *)0;

static void cb_btn_apply_edit(Fl_Button*, void*) {
  apply_edit();
}

Fl_Button *btn_done_edit=(Fl_Button *)0;

static void cb_btn_done_edit(Fl_Button*, void*) {
  done_edit();
}

Fl_Double_Window* make_message_editor() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(640, 344, _("Message Editor"));
    w = o; if (w) {/* empty */}
    { Fl_Tabs* o = new Fl_Tabs(0, 0, 530, 345);
      o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
      { Fl_Group* o = new Fl_Group(0, 25, 530, 320, _("F1-F4"));
        { new Fl_Box(22, 30, 84, 20, _("Label"));
        } // Fl_Box* o
        { new Fl_Box(211, 30, 223, 20, _("Message Text"));
        } // Fl_Box* o
        { edit_label[0] = new Fl_Input2(5, 74, 80, 22, _("F1"));
          edit_label[0]->box(FL_DOWN_BOX);
          edit_label[0]->color(FL_BACKGROUND2_COLOR);
          edit_label[0]->selection_color(FL_SELECTION_COLOR);
          edit_label[0]->labeltype(FL_NORMAL_LABEL);
          edit_label[0]->labelfont(0);
          edit_label[0]->labelsize(14);
          edit_label[0]->labelcolor(FL_FOREGROUND_COLOR);
          edit_label[0]->callback((Fl_Callback*)cb_edit_label);
          edit_label[0]->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          edit_label[0]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* edit_label[0]
        { edit_msg[0] = new Fl_Input2(90, 55, 435, 65);
          edit_msg[0]->type(4);
          edit_msg[0]->box(FL_DOWN_BOX);
          edit_msg[0]->color(FL_BACKGROUND2_COLOR);
          edit_msg[0]->selection_color(FL_SELECTION_COLOR);
          edit_msg[0]->labeltype(FL_NORMAL_LABEL);
          edit_msg[0]->labelfont(0);
          edit_msg[0]->labelsize(14);
          edit_msg[0]->labelcolor(FL_FOREGROUND_COLOR);
          edit_msg[0]->callback((Fl_Callback*)cb_edit_msg);
          edit_msg[0]->align(Fl_Align(FL_ALIGN_LEFT));
          edit_msg[0]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* edit_msg[0]
        { edit_label[1] = new Fl_Input2(5, 144, 80, 22, _("F2"));
          edit_label[1]->box(FL_DOWN_BOX);
          edit_label[1]->color(FL_BACKGROUND2_COLOR);
          edit_label[1]->selection_color(FL_SELECTION_COLOR);
          edit_label[1]->labeltype(FL_NORMAL_LABEL);
          edit_label[1]->labelfont(0);
          edit_label[1]->labelsize(14);
          edit_label[1]->labelcolor(FL_FOREGROUND_COLOR);
          edit_label[1]->callback((Fl_Callback*)cb_edit_label1);
          edit_label[1]->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          edit_label[1]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* edit_label[1]
        { edit_msg[1] = new Fl_Input2(90, 125, 435, 65);
          edit_msg[1]->type(4);
          edit_msg[1]->box(FL_DOWN_BOX);
          edit_msg[1]->color(FL_BACKGROUND2_COLOR);
          edit_msg[1]->selection_color(FL_SELECTION_COLOR);
          edit_msg[1]->labeltype(FL_NORMAL_LABEL);
          edit_msg[1]->labelfont(0);
          edit_msg[1]->labelsize(14);
          edit_msg[1]->labelcolor(FL_FOREGROUND_COLOR);
          edit_msg[1]->callback((Fl_Callback*)cb_edit_msg1);
          edit_msg[1]->align(Fl_Align(FL_ALIGN_LEFT));
          edit_msg[1]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* edit_msg[1]
        { edit_label[2] = new Fl_Input2(5, 214, 80, 22, _("F3"));
          edit_label[2]->box(FL_DOWN_BOX);
          edit_label[2]->color(FL_BACKGROUND2_COLOR);
          edit_label[2]->selection_color(FL_SELECTION_COLOR);
          edit_label[2]->labeltype(FL_NORMAL_LABEL);
          edit_label[2]->labelfont(0);
          edit_label[2]->labelsize(14);
          edit_label[2]->labelcolor(FL_FOREGROUND_COLOR);
          edit_label[2]->callback((Fl_Callback*)cb_edit_label2);
          edit_label[2]->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          edit_label[2]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* edit_label[2]
        { edit_msg[2] = new Fl_Input2(90, 195, 435, 65);
          edit_msg[2]->type(4);
          edit_msg[2]->box(FL_DOWN_BOX);
          edit_msg[2]->color(FL_BACKGROUND2_COLOR);
          edit_msg[2]->selection_color(FL_SELECTION_COLOR);
          edit_msg[2]->labeltype(FL_NORMAL_LABEL);
          edit_msg[2]->labelfont(0);
          edit_msg[2]->labelsize(14);
          edit_msg[2]->labelcolor(FL_FOREGROUND_COLOR);
          edit_msg[2]->callback((Fl_Callback*)cb_edit_msg2);
          edit_msg[2]->align(Fl_Align(FL_ALIGN_LEFT));
          edit_msg[2]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* edit_msg[2]
        { edit_label[3] = new Fl_Input2(5, 284, 80, 22, _("F4"));
          edit_label[3]->box(FL_DOWN_BOX);
          edit_label[3]->color(FL_BACKGROUND2_COLOR);
          edit_label[3]->selection_color(FL_SELECTION_COLOR);
          edit_label[3]->labeltype(FL_NORMAL_LABEL);
          edit_label[3]->labelfont(0);
          edit_label[3]->labelsize(14);
          edit_label[3]->labelcolor(FL_FOREGROUND_COLOR);
          edit_label[3]->callback((Fl_Callback*)cb_edit_label3);
          edit_label[3]->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          edit_label[3]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* edit_label[3]
        { edit_msg[3] = new Fl_Input2(90, 265, 435, 65);
          edit_msg[3]->type(4);
          edit_msg[3]->box(FL_DOWN_BOX);
          edit_msg[3]->color(FL_BACKGROUND2_COLOR);
          edit_msg[3]->selection_color(FL_SELECTION_COLOR);
          edit_msg[3]->labeltype(FL_NORMAL_LABEL);
          edit_msg[3]->labelfont(0);
          edit_msg[3]->labelsize(14);
          edit_msg[3]->labelcolor(FL_FOREGROUND_COLOR);
          edit_msg[3]->callback((Fl_Callback*)cb_edit_msg3);
          edit_msg[3]->align(Fl_Align(FL_ALIGN_LEFT));
          edit_msg[3]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* edit_msg[3]
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 25, 530, 320, _("F5-f8"));
        o->hide();
        { new Fl_Box(22, 30, 84, 20, _("Label"));
        } // Fl_Box* o
        { new Fl_Box(211, 30, 223, 20, _("Message Text"));
        } // Fl_Box* o
        { edit_label[4] = new Fl_Input2(5, 74, 80, 22, _("F5"));
          edit_label[4]->box(FL_DOWN_BOX);
          edit_label[4]->color(FL_BACKGROUND2_COLOR);
          edit_label[4]->selection_color(FL_SELECTION_COLOR);
          edit_label[4]->labeltype(FL_NORMAL_LABEL);
          edit_label[4]->labelfont(0);
          edit_label[4]->labelsize(14);
          edit_label[4]->labelcolor(FL_FOREGROUND_COLOR);
          edit_label[4]->callback((Fl_Callback*)cb_edit_label4);
          edit_label[4]->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          edit_label[4]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* edit_label[4]
        { edit_msg[4] = new Fl_Input2(90, 55, 435, 65);
          edit_msg[4]->type(4);
          edit_msg[4]->box(FL_DOWN_BOX);
          edit_msg[4]->color(FL_BACKGROUND2_COLOR);
          edit_msg[4]->selection_color(FL_SELECTION_COLOR);
          edit_msg[4]->labeltype(FL_NORMAL_LABEL);
          edit_msg[4]->labelfont(0);
          edit_msg[4]->labelsize(14);
          edit_msg[4]->labelcolor(FL_FOREGROUND_COLOR);
          edit_msg[4]->callback((Fl_Callback*)cb_edit_msg4);
          edit_msg[4]->align(Fl_Align(FL_ALIGN_LEFT));
          edit_msg[4]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* edit_msg[4]
        { edit_label[5] = new Fl_Input2(5, 144, 80, 22, _("F6"));
          edit_label[5]->box(FL_DOWN_BOX);
          edit_label[5]->color(FL_BACKGROUND2_COLOR);
          edit_label[5]->selection_color(FL_SELECTION_COLOR);
          edit_label[5]->labeltype(FL_NORMAL_LABEL);
          edit_label[5]->labelfont(0);
          edit_label[5]->labelsize(14);
          edit_label[5]->labelcolor(FL_FOREGROUND_COLOR);
          edit_label[5]->callback((Fl_Callback*)cb_edit_label5);
          edit_label[5]->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          edit_label[5]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* edit_label[5]
        { edit_msg[5] = new Fl_Input2(90, 125, 435, 65);
          edit_msg[5]->type(4);
          edit_msg[5]->box(FL_DOWN_BOX);
          edit_msg[5]->color(FL_BACKGROUND2_COLOR);
          edit_msg[5]->selection_color(FL_SELECTION_COLOR);
          edit_msg[5]->labeltype(FL_NORMAL_LABEL);
          edit_msg[5]->labelfont(0);
          edit_msg[5]->labelsize(14);
          edit_msg[5]->labelcolor(FL_FOREGROUND_COLOR);
          edit_msg[5]->callback((Fl_Callback*)cb_edit_msg5);
          edit_msg[5]->align(Fl_Align(FL_ALIGN_LEFT));
          edit_msg[5]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* edit_msg[5]
        { edit_label[6] = new Fl_Input2(5, 214, 80, 22, _("F7"));
          edit_label[6]->box(FL_DOWN_BOX);
          edit_label[6]->color(FL_BACKGROUND2_COLOR);
          edit_label[6]->selection_color(FL_SELECTION_COLOR);
          edit_label[6]->labeltype(FL_NORMAL_LABEL);
          edit_label[6]->labelfont(0);
          edit_label[6]->labelsize(14);
          edit_label[6]->labelcolor(FL_FOREGROUND_COLOR);
          edit_label[6]->callback((Fl_Callback*)cb_edit_label6);
          edit_label[6]->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          edit_label[6]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* edit_label[6]
        { edit_msg[6] = new Fl_Input2(90, 195, 435, 65);
          edit_msg[6]->type(4);
          edit_msg[6]->box(FL_DOWN_BOX);
          edit_msg[6]->color(FL_BACKGROUND2_COLOR);
          edit_msg[6]->selection_color(FL_SELECTION_COLOR);
          edit_msg[6]->labeltype(FL_NORMAL_LABEL);
          edit_msg[6]->labelfont(0);
          edit_msg[6]->labelsize(14);
          edit_msg[6]->labelcolor(FL_FOREGROUND_COLOR);
          edit_msg[6]->callback((Fl_Callback*)cb_edit_msg6);
          edit_msg[6]->align(Fl_Align(FL_ALIGN_LEFT));
          edit_msg[6]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* edit_msg[6]
        { edit_label[7] = new Fl_Input2(5, 284, 80, 22, _("F8"));
          edit_label[7]->box(FL_DOWN_BOX);
          edit_label[7]->color(FL_BACKGROUND2_COLOR);
          edit_label[7]->selection_color(FL_SELECTION_COLOR);
          edit_label[7]->labeltype(FL_NORMAL_LABEL);
          edit_label[7]->labelfont(0);
          edit_label[7]->labelsize(14);
          edit_label[7]->labelcolor(FL_FOREGROUND_COLOR);
          edit_label[7]->callback((Fl_Callback*)cb_edit_label7);
          edit_label[7]->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          edit_label[7]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* edit_label[7]
        { edit_msg[7] = new Fl_Input2(90, 265, 435, 65);
          edit_msg[7]->type(4);
          edit_msg[7]->box(FL_DOWN_BOX);
          edit_msg[7]->color(FL_BACKGROUND2_COLOR);
          edit_msg[7]->selection_color(FL_SELECTION_COLOR);
          edit_msg[7]->labeltype(FL_NORMAL_LABEL);
          edit_msg[7]->labelfont(0);
          edit_msg[7]->labelsize(14);
          edit_msg[7]->labelcolor(FL_FOREGROUND_COLOR);
          edit_msg[7]->callback((Fl_Callback*)cb_edit_msg7);
          edit_msg[7]->align(Fl_Align(FL_ALIGN_LEFT));
          edit_msg[7]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* edit_msg[7]
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 25, 530, 320, _("F9-F12"));
        o->hide();
        { new Fl_Box(22, 30, 84, 20, _("Label"));
        } // Fl_Box* o
        { new Fl_Box(211, 30, 223, 20, _("Message Text"));
        } // Fl_Box* o
        { edit_label[8] = new Fl_Input2(5, 73, 80, 22, _("F9"));
          edit_label[8]->box(FL_DOWN_BOX);
          edit_label[8]->color(FL_BACKGROUND2_COLOR);
          edit_label[8]->selection_color(FL_SELECTION_COLOR);
          edit_label[8]->labeltype(FL_NORMAL_LABEL);
          edit_label[8]->labelfont(0);
          edit_label[8]->labelsize(14);
          edit_label[8]->labelcolor(FL_FOREGROUND_COLOR);
          edit_label[8]->callback((Fl_Callback*)cb_edit_label8);
          edit_label[8]->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          edit_label[8]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* edit_label[8]
        { edit_msg[8] = new Fl_Input2(90, 55, 435, 65);
          edit_msg[8]->type(4);
          edit_msg[8]->box(FL_DOWN_BOX);
          edit_msg[8]->color(FL_BACKGROUND2_COLOR);
          edit_msg[8]->selection_color(FL_SELECTION_COLOR);
          edit_msg[8]->labeltype(FL_NORMAL_LABEL);
          edit_msg[8]->labelfont(0);
          edit_msg[8]->labelsize(14);
          edit_msg[8]->labelcolor(FL_FOREGROUND_COLOR);
          edit_msg[8]->callback((Fl_Callback*)cb_edit_msg8);
          edit_msg[8]->align(Fl_Align(FL_ALIGN_LEFT));
          edit_msg[8]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* edit_msg[8]
        { edit_label[9] = new Fl_Input2(5, 143, 80, 22, _("F10"));
          edit_label[9]->box(FL_DOWN_BOX);
          edit_label[9]->color(FL_BACKGROUND2_COLOR);
          edit_label[9]->selection_color(FL_SELECTION_COLOR);
          edit_label[9]->labeltype(FL_NORMAL_LABEL);
          edit_label[9]->labelfont(0);
          edit_label[9]->labelsize(14);
          edit_label[9]->labelcolor(FL_FOREGROUND_COLOR);
          edit_label[9]->callback((Fl_Callback*)cb_edit_label9);
          edit_label[9]->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          edit_label[9]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* edit_label[9]
        { edit_msg[9] = new Fl_Input2(90, 125, 435, 65);
          edit_msg[9]->type(4);
          edit_msg[9]->box(FL_DOWN_BOX);
          edit_msg[9]->color(FL_BACKGROUND2_COLOR);
          edit_msg[9]->selection_color(FL_SELECTION_COLOR);
          edit_msg[9]->labeltype(FL_NORMAL_LABEL);
          edit_msg[9]->labelfont(0);
          edit_msg[9]->labelsize(14);
          edit_msg[9]->labelcolor(FL_FOREGROUND_COLOR);
          edit_msg[9]->callback((Fl_Callback*)cb_edit_msg9);
          edit_msg[9]->align(Fl_Align(FL_ALIGN_LEFT));
          edit_msg[9]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* edit_msg[9]
        { edit_label[10] = new Fl_Input2(5, 213, 80, 22, _("F11"));
          edit_label[10]->box(FL_DOWN_BOX);
          edit_label[10]->color(FL_BACKGROUND2_COLOR);
          edit_label[10]->selection_color(FL_SELECTION_COLOR);
          edit_label[10]->labeltype(FL_NORMAL_LABEL);
          edit_label[10]->labelfont(0);
          edit_label[10]->labelsize(14);
          edit_label[10]->labelcolor(FL_FOREGROUND_COLOR);
          edit_label[10]->callback((Fl_Callback*)cb_edit_labela);
          edit_label[10]->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          edit_label[10]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* edit_label[10]
        { edit_msg[10] = new Fl_Input2(90, 195, 435, 65);
          edit_msg[10]->type(4);
          edit_msg[10]->box(FL_DOWN_BOX);
          edit_msg[10]->color(FL_BACKGROUND2_COLOR);
          edit_msg[10]->selection_color(FL_SELECTION_COLOR);
          edit_msg[10]->labeltype(FL_NORMAL_LABEL);
          edit_msg[10]->labelfont(0);
          edit_msg[10]->labelsize(14);
          edit_msg[10]->labelcolor(FL_FOREGROUND_COLOR);
          edit_msg[10]->callback((Fl_Callback*)cb_edit_msga);
          edit_msg[10]->align(Fl_Align(FL_ALIGN_LEFT));
          edit_msg[10]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* edit_msg[10]
        { edit_label[11] = new Fl_Input2(5, 283, 80, 22, _("F12"));
          edit_label[11]->box(FL_DOWN_BOX);
          edit_label[11]->color(FL_BACKGROUND2_COLOR);
          edit_label[11]->selection_color(FL_SELECTION_COLOR);
          edit_label[11]->labeltype(FL_NORMAL_LABEL);
          edit_label[11]->labelfont(0);
          edit_label[11]->labelsize(14);
          edit_label[11]->labelcolor(FL_FOREGROUND_COLOR);
          edit_label[11]->callback((Fl_Callback*)cb_edit_labelb);
          edit_label[11]->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          edit_label[11]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* edit_label[11]
        { edit_msg[11] = new Fl_Input2(90, 265, 435, 65);
          edit_msg[11]->type(4);
          edit_msg[11]->box(FL_DOWN_BOX);
          edit_msg[11]->color(FL_BACKGROUND2_COLOR);
          edit_msg[11]->selection_color(FL_SELECTION_COLOR);
          edit_msg[11]->labeltype(FL_NORMAL_LABEL);
          edit_msg[11]->labelfont(0);
          edit_msg[11]->labelsize(14);
          edit_msg[11]->labelcolor(FL_FOREGROUND_COLOR);
          edit_msg[11]->callback((Fl_Callback*)cb_edit_msgb);
          edit_msg[11]->align(Fl_Align(FL_ALIGN_LEFT));
          edit_msg[11]->when(FL_WHEN_RELEASE);
        } // Fl_Input2* edit_msg[11]
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Tabs* o
    { Fl_Group* o = new Fl_Group(534, 0, 101, 224);
      o->box(FL_ENGRAVED_FRAME);
      { Fl_ListBox* o = listbox_BT = new Fl_ListBox(570, 6, 60, 22, _("BT"));
        listbox_BT->box(FL_DOWN_BOX);
        listbox_BT->color(FL_BACKGROUND2_COLOR);
        listbox_BT->selection_color(FL_BACKGROUND_COLOR);
        listbox_BT->labeltype(FL_NORMAL_LABEL);
        listbox_BT->labelfont(0);
        listbox_BT->labelsize(14);
        listbox_BT->labelcolor(FL_FOREGROUND_COLOR);
        listbox_BT->callback((Fl_Callback*)cb_listbox_BT);
        listbox_BT->align(Fl_Align(FL_ALIGN_LEFT));
        listbox_BT->when(FL_WHEN_RELEASE);
        o->add(szProsigns);
        o->value(progStatus.BT.c_str()); o->labelsize(FL_NORMAL_SIZE);
        listbox_BT->end();
      } // Fl_ListBox* listbox_BT
      { Fl_ListBox* o = listbox_AA = new Fl_ListBox(570, 30, 60, 22, _("AA"));
        listbox_AA->box(FL_DOWN_BOX);
        listbox_AA->color(FL_BACKGROUND2_COLOR);
        listbox_AA->selection_color(FL_BACKGROUND_COLOR);
        listbox_AA->labeltype(FL_NORMAL_LABEL);
        listbox_AA->labelfont(0);
        listbox_AA->labelsize(14);
        listbox_AA->labelcolor(FL_FOREGROUND_COLOR);
        listbox_AA->callback((Fl_Callback*)cb_listbox_AA);
        listbox_AA->align(Fl_Align(FL_ALIGN_LEFT));
        listbox_AA->when(FL_WHEN_RELEASE);
        o->add(szProsigns);
        o->value(progStatus.AA.c_str()); o->labelsize(FL_NORMAL_SIZE);
        listbox_AA->end();
      } // Fl_ListBox* listbox_AA
      { Fl_ListBox* o = listbox_AS = new Fl_ListBox(570, 54, 60, 22, _("AS"));
        listbox_AS->box(FL_DOWN_BOX);
        listbox_AS->color(FL_BACKGROUND2_COLOR);
        listbox_AS->selection_color(FL_BACKGROUND_COLOR);
        listbox_AS->labeltype(FL_NORMAL_LABEL);
        listbox_AS->labelfont(0);
        listbox_AS->labelsize(14);
        listbox_AS->labelcolor(FL_FOREGROUND_COLOR);
        listbox_AS->callback((Fl_Callback*)cb_listbox_AS);
        listbox_AS->align(Fl_Align(FL_ALIGN_LEFT));
        listbox_AS->when(FL_WHEN_RELEASE);
        o->add(szProsigns);
        o->value(progStatus.AS.c_str()); o->labelsize(FL_NORMAL_SIZE);
        listbox_AS->end();
      } // Fl_ListBox* listbox_AS
      { Fl_ListBox* o = listbox_AR = new Fl_ListBox(570, 78, 60, 22, _("AR"));
        listbox_AR->box(FL_DOWN_BOX);
        listbox_AR->color(FL_BACKGROUND2_COLOR);
        listbox_AR->selection_color(FL_BACKGROUND_COLOR);
        listbox_AR->labeltype(FL_NORMAL_LABEL);
        listbox_AR->labelfont(0);
        listbox_AR->labelsize(14);
        listbox_AR->labelcolor(FL_FOREGROUND_COLOR);
        listbox_AR->callback((Fl_Callback*)cb_listbox_AR);
        listbox_AR->align(Fl_Align(FL_ALIGN_LEFT));
        listbox_AR->when(FL_WHEN_RELEASE);
        o->add(szProsigns);
        o->value(progStatus.AR.c_str()); o->labelsize(FL_NORMAL_SIZE);
        listbox_AR->end();
      } // Fl_ListBox* listbox_AR
      { Fl_ListBox* o = listbox_SK = new Fl_ListBox(570, 102, 60, 22, _("SK"));
        listbox_SK->box(FL_DOWN_BOX);
        listbox_SK->color(FL_BACKGROUND2_COLOR);
        listbox_SK->selection_color(FL_BACKGROUND_COLOR);
        listbox_SK->labeltype(FL_NORMAL_LABEL);
        listbox_SK->labelfont(0);
        listbox_SK->labelsize(14);
        listbox_SK->labelcolor(FL_FOREGROUND_COLOR);
        listbox_SK->callback((Fl_Callback*)cb_listbox_SK);
        listbox_SK->align(Fl_Align(FL_ALIGN_LEFT));
        listbox_SK->when(FL_WHEN_RELEASE);
        o->add(szProsigns);
        o->value(progStatus.SK.c_str()); o->labelsize(FL_NORMAL_SIZE);
        listbox_SK->end();
      } // Fl_ListBox* listbox_SK
      { Fl_ListBox* o = listbox_KN = new Fl_ListBox(570, 126, 60, 22, _("KN"));
        listbox_KN->box(FL_DOWN_BOX);
        listbox_KN->color(FL_BACKGROUND2_COLOR);
        listbox_KN->selection_color(FL_BACKGROUND_COLOR);
        listbox_KN->labeltype(FL_NORMAL_LABEL);
        listbox_KN->labelfont(0);
        listbox_KN->labelsize(14);
        listbox_KN->labelcolor(FL_FOREGROUND_COLOR);
        listbox_KN->callback((Fl_Callback*)cb_listbox_KN);
        listbox_KN->align(Fl_Align(FL_ALIGN_LEFT));
        listbox_KN->when(FL_WHEN_RELEASE);
        o->add(szProsigns);
        o->value(progStatus.KN.c_str()); o->labelsize(FL_NORMAL_SIZE);
        listbox_KN->end();
      } // Fl_ListBox* listbox_KN
      { Fl_ListBox* o = listbox_INT = new Fl_ListBox(570, 150, 60, 22, _("INT"));
        listbox_INT->box(FL_DOWN_BOX);
        listbox_INT->color(FL_BACKGROUND2_COLOR);
        listbox_INT->selection_color(FL_BACKGROUND_COLOR);
        listbox_INT->labeltype(FL_NORMAL_LABEL);
        listbox_INT->labelfont(0);
        listbox_INT->labelsize(14);
        listbox_INT->labelcolor(FL_FOREGROUND_COLOR);
        listbox_INT->callback((Fl_Callback*)cb_listbox_INT);
        listbox_INT->align(Fl_Align(FL_ALIGN_LEFT));
        listbox_INT->when(FL_WHEN_RELEASE);
        o->add(szProsigns);
        o->value(progStatus.INT.c_str()); o->labelsize(FL_NORMAL_SIZE);
        listbox_INT->end();
      } // Fl_ListBox* listbox_INT
      { Fl_ListBox* o = listbox_HM = new Fl_ListBox(570, 174, 60, 22, _("HM"));
        listbox_HM->box(FL_DOWN_BOX);
        listbox_HM->color(FL_BACKGROUND2_COLOR);
        listbox_HM->selection_color(FL_BACKGROUND_COLOR);
        listbox_HM->labeltype(FL_NORMAL_LABEL);
        listbox_HM->labelfont(0);
        listbox_HM->labelsize(14);
        listbox_HM->labelcolor(FL_FOREGROUND_COLOR);
        listbox_HM->callback((Fl_Callback*)cb_listbox_HM);
        listbox_HM->align(Fl_Align(FL_ALIGN_LEFT));
        listbox_HM->when(FL_WHEN_RELEASE);
        o->add(szProsigns);
        o->value(progStatus.HM.c_str()); o->labelsize(FL_NORMAL_SIZE);
        listbox_HM->end();
      } // Fl_ListBox* listbox_HM
      { Fl_ListBox* o = listbox_VE = new Fl_ListBox(570, 199, 60, 22, _("VE"));
        listbox_VE->box(FL_DOWN_BOX);
        listbox_VE->color(FL_BACKGROUND2_COLOR);
        listbox_VE->selection_color(FL_BACKGROUND_COLOR);
        listbox_VE->labeltype(FL_NORMAL_LABEL);
        listbox_VE->labelfont(0);
        listbox_VE->labelsize(14);
        listbox_VE->labelcolor(FL_FOREGROUND_COLOR);
        listbox_VE->callback((Fl_Callback*)cb_listbox_VE);
        listbox_VE->align(Fl_Align(FL_ALIGN_LEFT));
        listbox_VE->when(FL_WHEN_RELEASE);
        o->add(szProsigns);
        o->value(progStatus.VE.c_str()); o->labelsize(FL_NORMAL_SIZE);
        listbox_VE->end();
      } // Fl_ListBox* listbox_VE
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(534, 222, 90, 43);
      o->box(FL_ENGRAVED_FRAME);
      { new Fl_Box(538, 224, 82, 20, _("\'[\' Send"));
      } // Fl_Box* o
      { new Fl_Box(538, 244, 82, 20, _("\']\' Recv"));
      } // Fl_Box* o
      o->end();
    } // Fl_Group* o
    { btn_cancel_edit = new Fl_Button(546, 268, 65, 22, _("Cancel"));
      btn_cancel_edit->tooltip(_("Exit editor, discard changes"));
      btn_cancel_edit->callback((Fl_Callback*)cb_btn_cancel_edit);
    } // Fl_Button* btn_cancel_edit
    { btn_apply_edit = new Fl_Button(546, 294, 65, 22, _("Apply"));
      btn_apply_edit->tooltip(_("Apply current changes to function keys"));
      btn_apply_edit->callback((Fl_Callback*)cb_btn_apply_edit);
    } // Fl_Button* btn_apply_edit
    { btn_done_edit = new Fl_Button(546, 321, 65, 22, _("Close"));
      btn_done_edit->tooltip(_("Apply changes and close editor"));
      btn_done_edit->callback((Fl_Callback*)cb_btn_done_edit);
    } // Fl_Button* btn_done_edit
    o->end();
    o->resizable(o);
  } // Fl_Double_Window* o
  return w;
}

Fl_ComboBox *select_cwioPORT=(Fl_ComboBox *)0;

static void cb_select_cwioPORT(Fl_ComboBox* o, void*) {
  progStatus.cwioPORT = o->value();
}

Fl_Light_Button *btn_cwioCONNECT=(Fl_Light_Button *)0;

static void cb_btn_cwioCONNECT(Fl_Light_Button* o, void*) {
  if (o->value() == 0) {
  close_cwkey();
  btn_cwioCAT->activate();
  btn_cwioAUX->activate();
  btn_cwioSEP->activate();
  progStatus.cwioCONNECTED = 0;
}
else if (!open_cwkey()) {
  o->value(0);
  btn_cwioCAT->activate();
  btn_cwioAUX->activate();
  btn_cwioSEP->activate();
  progStatus.cwioCONNECTED = 0;
} else {
  btn_cwioCAT->value(0); btn_cwioCAT->deactivate();
  btn_cwioAUX->value(0); btn_cwioAUX->deactivate();
  btn_cwioSEP->value(0); btn_cwioSEP->deactivate();
  progStatus.cwioCONNECTED = 1;
}
progStatus.cwioSHARED = 0;
}

Fl_Check_Button *btn_cwioCAT=(Fl_Check_Button *)0;

static void cb_btn_cwioCAT(Fl_Check_Button* o, void*) {
  if (o->value()) {
  progStatus.cwioSHARED = 1;
  btn_cwioAUX->value(0); btn_cwioAUX->deactivate();
  btn_cwioSEP->value(0); btn_cwioSEP->deactivate();
  btn_cwioCONNECT->value(0); btn_cwioCONNECT->deactivate();
  select_cwioPORT->value("NONE"); select_cwioPORT->deactivate();
}else {
  progStatus.cwioSHARED = 0;
  btn_cwioCONNECT->activate();
  btn_cwioAUX->activate();
  btn_cwioSEP->activate();
  select_cwioPORT->activate();
};
}

Fl_Check_Button *btn_cwioAUX=(Fl_Check_Button *)0;

static void cb_btn_cwioAUX(Fl_Check_Button* o, void*) {
  if (o->value()) {
  progStatus.cwioSHARED = 2;
  btn_cwioCAT->value(0); btn_cwioCAT->deactivate();
  btn_cwioSEP->value(0); btn_cwioSEP->deactivate();
  btn_cwioCONNECT->value(0); btn_cwioCONNECT->deactivate();
  select_cwioPORT->value("NONE"); select_cwioPORT->deactivate();
}else {
  progStatus.cwioSHARED = 0;
  btn_cwioCONNECT->activate();
  btn_cwioCAT->activate();
  btn_cwioSEP->activate();
  select_cwioPORT->activate();
};
}

Fl_Check_Button *btn_cwioSEP=(Fl_Check_Button *)0;

static void cb_btn_cwioSEP(Fl_Check_Button* o, void*) {
  if (o->value()) {
  progStatus.cwioSHARED = 3;
  btn_cwioAUX->value(0); btn_cwioAUX->deactivate();
  btn_cwioCAT->value(0); btn_cwioCAT->deactivate();
  btn_cwioCONNECT->value(0); btn_cwioCONNECT->deactivate();
  select_cwioPORT->value("NONE"); select_cwioPORT->deactivate();
}else {
  progStatus.cwioSHARED = 0;
  btn_cwioCONNECT->activate();
  btn_cwioAUX->activate();
  btn_cwioCAT->activate();
  select_cwioPORT->activate();
};
}

Fl_ListBox *listbox_cwioKEYLINE=(Fl_ListBox *)0;

static void cb_listbox_cwioKEYLINE(Fl_ListBox* o, void*) {
  progStatus.cwioKEYLINE = o->index();
}

Fl_Spinner *cntr_cwioPTT=(Fl_Spinner *)0;

static void cb_cntr_cwioPTT(Fl_Spinner* o, void*) {
  progStatus.cwioPTT = o->value();
}

Fl_Check_Button *btn_cwioINVERTED=(Fl_Check_Button *)0;

static void cb_btn_cwioINVERTED(Fl_Check_Button* o, void*) {
  progStatus.cwioINVERTED = o->value();
reset_cwioport();
}

Fl_Counter *cnt_cwio_comp=(Fl_Counter *)0;

static void cb_cnt_cwio_comp(Fl_Counter* o, void*) {
  progStatus.cwio_comp = o->value();
}

Fl_Light_Button *btn_cw_dtr_calibrate=(Fl_Light_Button *)0;

static void cb_btn_cw_dtr_calibrate(Fl_Light_Button*, void*) {
  calibrate_cwio();
}

Fl_Counter *cnt_cwio_keycorr=(Fl_Counter *)0;

static void cb_cnt_cwio_keycorr(Fl_Counter* o, void*) {
  progStatus.cwio_keycorr = o->value();
}

Fl_Double_Window* cwio_config_dialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(670, 100, _("CW Configuration"));
    w = o; if (w) {/* empty */}
    { Fl_Group* o = new Fl_Group(2, 3, 666, 100);
      o->box(FL_ENGRAVED_FRAME);
      { Fl_ComboBox* o = select_cwioPORT = new Fl_ComboBox(73, 73, 496, 23, _("Ser. Port"));
        select_cwioPORT->tooltip(_("CWIO serial port"));
        select_cwioPORT->box(FL_DOWN_BOX);
        select_cwioPORT->color((Fl_Color)53);
        select_cwioPORT->selection_color(FL_BACKGROUND_COLOR);
        select_cwioPORT->labeltype(FL_NORMAL_LABEL);
        select_cwioPORT->labelfont(0);
        select_cwioPORT->labelsize(14);
        select_cwioPORT->labelcolor(FL_FOREGROUND_COLOR);
        select_cwioPORT->callback((Fl_Callback*)cb_select_cwioPORT);
        select_cwioPORT->align(Fl_Align(FL_ALIGN_LEFT));
        select_cwioPORT->when(FL_WHEN_RELEASE);
        o->value(progStatus.cwioPORT.c_str());
        select_cwioPORT->end();
      } // Fl_ComboBox* select_cwioPORT
      { Fl_Light_Button* o = btn_cwioCONNECT = new Fl_Light_Button(578, 73, 80, 23, _("Connect"));
        btn_cwioCONNECT->callback((Fl_Callback*)cb_btn_cwioCONNECT);
        o->value(progStatus.cwioCONNECTED);
      } // Fl_Light_Button* btn_cwioCONNECT
      { Fl_Check_Button* o = btn_cwioCAT = new Fl_Check_Button(74, 15, 23, 15, _("Use CAT"));
        btn_cwioCAT->tooltip(_("Use DTR/RTS on CAT serial port"));
        btn_cwioCAT->down_box(FL_DOWN_BOX);
        btn_cwioCAT->callback((Fl_Callback*)cb_btn_cwioCAT);
        btn_cwioCAT->align(Fl_Align(FL_ALIGN_LEFT));
        o->value(progStatus.cwioSHARED == 1);
      } // Fl_Check_Button* btn_cwioCAT
      { Fl_Check_Button* o = btn_cwioAUX = new Fl_Check_Button(75, 46, 23, 15, _("Use AUX"));
        btn_cwioAUX->tooltip(_("Use DTR/RTS on Auxiliary serial port"));
        btn_cwioAUX->down_box(FL_DOWN_BOX);
        btn_cwioAUX->callback((Fl_Callback*)cb_btn_cwioAUX);
        btn_cwioAUX->align(Fl_Align(FL_ALIGN_LEFT));
        o->value(progStatus.cwioSHARED == 2);
      } // Fl_Check_Button* btn_cwioAUX
      { Fl_Check_Button* o = btn_cwioSEP = new Fl_Check_Button(160, 15, 23, 15, _("Use SEP"));
        btn_cwioSEP->tooltip(_("Use DTR/RTS Separate serial port"));
        btn_cwioSEP->down_box(FL_DOWN_BOX);
        btn_cwioSEP->callback((Fl_Callback*)cb_btn_cwioSEP);
        btn_cwioSEP->align(Fl_Align(FL_ALIGN_LEFT));
        o->value(progStatus.cwioSHARED == 3);
      } // Fl_Check_Button* btn_cwioSEP
      { Fl_ListBox* o = listbox_cwioKEYLINE = new Fl_ListBox(593, 41, 65, 24, _("Keyline"));
        listbox_cwioKEYLINE->tooltip(_("Select either DTR or RTS for keyline"));
        listbox_cwioKEYLINE->box(FL_DOWN_BOX);
        listbox_cwioKEYLINE->color(FL_BACKGROUND2_COLOR);
        listbox_cwioKEYLINE->selection_color(FL_BACKGROUND_COLOR);
        listbox_cwioKEYLINE->labeltype(FL_NORMAL_LABEL);
        listbox_cwioKEYLINE->labelfont(0);
        listbox_cwioKEYLINE->labelsize(14);
        listbox_cwioKEYLINE->labelcolor(FL_FOREGROUND_COLOR);
        listbox_cwioKEYLINE->callback((Fl_Callback*)cb_listbox_cwioKEYLINE);
        listbox_cwioKEYLINE->align(Fl_Align(FL_ALIGN_LEFT));
        listbox_cwioKEYLINE->when(FL_WHEN_RELEASE);
        o->add("None|RTS|DTR");
        o->index(progStatus.cwioKEYLINE);
        listbox_cwioKEYLINE->end();
      } // Fl_ListBox* listbox_cwioKEYLINE
      { Fl_Spinner* o = cntr_cwioPTT = new Fl_Spinner(608, 10, 50, 25, _("PTT delay"));
        cntr_cwioPTT->tooltip(_("PTT delay before keydown\n0 = Break-in"));
        cntr_cwioPTT->minimum(0);
        cntr_cwioPTT->value(0);
        cntr_cwioPTT->callback((Fl_Callback*)cb_cntr_cwioPTT);
        o->value(progStatus.cwioPTT);
      } // Fl_Spinner* cntr_cwioPTT
      { Fl_Check_Button* o = btn_cwioINVERTED = new Fl_Check_Button(160, 46, 23, 15, _("Inverted"));
        btn_cwioINVERTED->tooltip(_("DTR/RTS signaling is inverted\n(-) keying"));
        btn_cwioINVERTED->down_box(FL_DOWN_BOX);
        btn_cwioINVERTED->callback((Fl_Callback*)cb_btn_cwioINVERTED);
        btn_cwioINVERTED->align(Fl_Align(FL_ALIGN_LEFT));
        o->value(progStatus.cwioINVERTED);
      } // Fl_Check_Button* btn_cwioINVERTED
      { Fl_Counter* o = cnt_cwio_comp = new Fl_Counter(190, 10, 125, 24, _("WPM Comp msec"));
        cnt_cwio_comp->tooltip(_("Timing compensation"));
        cnt_cwio_comp->minimum(0);
        cnt_cwio_comp->maximum(10);
        cnt_cwio_comp->callback((Fl_Callback*)cb_cnt_cwio_comp);
        cnt_cwio_comp->align(Fl_Align(FL_ALIGN_RIGHT));
        o->value(progStatus.cwio_comp);
        o->lstep(1.0);
      } // Fl_Counter* cnt_cwio_comp
      { btn_cw_dtr_calibrate = new Fl_Light_Button(444, 10, 84, 24, _("Calibrate"));
        btn_cw_dtr_calibrate->selection_color((Fl_Color)6);
        btn_cw_dtr_calibrate->callback((Fl_Callback*)cb_btn_cw_dtr_calibrate);
      } // Fl_Light_Button* btn_cw_dtr_calibrate
      { Fl_Counter* o = cnt_cwio_keycorr = new Fl_Counter(190, 41, 125, 24, _("Xcvr comp msec"));
        cnt_cwio_keycorr->tooltip(_("Compensate for xcvr keying distortion"));
        cnt_cwio_keycorr->minimum(-10);
        cnt_cwio_keycorr->maximum(10);
        cnt_cwio_keycorr->step(0.01);
        cnt_cwio_keycorr->callback((Fl_Callback*)cb_cnt_cwio_keycorr);
        cnt_cwio_keycorr->align(Fl_Align(FL_ALIGN_RIGHT));
        o->value(progStatus.cwio_keycorr);
        o->lstep(0.10);
      } // Fl_Counter* cnt_cwio_keycorr
      o->end();
    } // Fl_Group* o
    o->end();
  } // Fl_Double_Window* o
  return w;
}
